using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;

namespace ProjectEuler
{
	public class Program
	{
		public static void Main() {
			Console.WriteLine("Project Euler");
			Console.WriteLine("-------------");
			//long answer = SumMultiplesOf3And5UpTo(1000); // 1
			//long answer = SumEvenFibonacci(4000000); // 2
			//long answer = FindLargestPrimeFactor(600851475143); // 3
			//long answer = FindLargestPalindromeProductOfTwoFactors(3); // 4
			//long answer = FindSmallestNumberDivisibleByFactorsUpTo(20); // 5
			//long answer = DiffSquareOfSumAndSumOfSquares(100); // 6
			//long answer = DiffSumOfSquaresAndSquareOfSum(100); // 6
			//long answer = FindNthPrimeNumber(10, true); // 7
			//long answer = FindNthPrimeNumber(10001); // 7
			//long answer = FindMaxAdjacentProduct(13, "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"); // 8
			//long answer = FindPythagoreanTripletProduct(1000); // 9
			//long answer = SumPrimesBelow(2000000); // 10
			//long answer = FindMaxAdjacentProduct(4, new int[20, 20]{{8, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08}, {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00}, {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65}, {52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91}, {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80}, {24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50}, {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70}, {67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21}, {24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72}, {21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95}, {78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92}, {16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57}, {86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58}, {19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40}, {04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66}, {88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69}, {04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36}, {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16}, {20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54}, {01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48}}); // 11
			//long answer = FirstTriangleNumberExceedingDivisors(500); // 12
			//long answer = FirstTenDigitsOfSum(37107287533902102798797998220837590246510135740250d, 46376937677490009712648124896970078050417018260538d, 74324986199524741059474233309513058123726617309629d, 91942213363574161572522430563301811072406154908250d, 23067588207539346171171980310421047513778063246676d, 89261670696623633820136378418383684178734361726757d, 28112879812849979408065481931592621691275889832738d, 44274228917432520321923589422876796487670272189318d, 47451445736001306439091167216856844588711603153276d, 70386486105843025439939619828917593665686757934951d, 62176457141856560629502157223196586755079324193331d, 64906352462741904929101432445813822663347944758178d, 92575867718337217661963751590579239728245598838407d, 58203565325359399008402633568948830189458628227828d, 80181199384826282014278194139940567587151170094390d, 35398664372827112653829987240784473053190104293586d, 86515506006295864861532075273371959191420517255829d, 71693888707715466499115593487603532921714970056938d, 54370070576826684624621495650076471787294438377604d, 53282654108756828443191190634694037855217779295145d, 36123272525000296071075082563815656710885258350721d, 45876576172410976447339110607218265236877223636045d, 17423706905851860660448207621209813287860733969412d, 81142660418086830619328460811191061556940512689692d, 51934325451728388641918047049293215058642563049483d, 62467221648435076201727918039944693004732956340691d, 15732444386908125794514089057706229429197107928209d, 55037687525678773091862540744969844508330393682126d, 18336384825330154686196124348767681297534375946515d, 80386287592878490201521685554828717201219257766954d, 78182833757993103614740356856449095527097864797581d, 16726320100436897842553539920931837441497806860984d, 48403098129077791799088218795327364475675590848030d, 87086987551392711854517078544161852424320693150332d, 59959406895756536782107074926966537676326235447210d, 69793950679652694742597709739166693763042633987085d, 41052684708299085211399427365734116182760315001271d, 65378607361501080857009149939512557028198746004375d, 35829035317434717326932123578154982629742552737307d, 94953759765105305946966067683156574377167401875275d, 88902802571733229619176668713819931811048770190271d, 25267680276078003013678680992525463401061632866526d, 36270218540497705585629946580636237993140746255962d, 24074486908231174977792365466257246923322810917141d, 91430288197103288597806669760892938638285025333403d, 34413065578016127815921815005561868836468420090470d, 23053081172816430487623791969842487255036638784583d, 11487696932154902810424020138335124462181441773470d, 63783299490636259666498587618221225225512486764533d, 67720186971698544312419572409913959008952310058822d, 95548255300263520781532296796249481641953868218774d, 76085327132285723110424803456124867697064507995236d, 37774242535411291684276865538926205024910326572967d, 23701913275725675285653248258265463092207058596522d, 29798860272258331913126375147341994889534765745501d, 18495701454879288984856827726077713721403798879715d, 38298203783031473527721580348144513491373226651381d, 34829543829199918180278916522431027392251122869539d, 40957953066405232632538044100059654939159879593635d, 29746152185502371307642255121183693803580388584903d, 41698116222072977186158236678424689157993532961922d, 62467957194401269043877107275048102390895523597457d, 23189706772547915061505504953922979530901129967519d, 86188088225875314529584099251203829009407770775672d, 11306739708304724483816533873502340845647058077308d, 82959174767140363198008187129011875491310547126581d, 97623331044818386269515456334926366572897563400500d, 42846280183517070527831839425882145521227251250327d, 55121603546981200581762165212827652751691296897789d, 32238195734329339946437501907836945765883352399886d, 75506164965184775180738168837861091527357929701337d, 62177842752192623401942399639168044983993173312731d, 32924185707147349566916674687634660915035914677504d, 99518671430235219628894890102423325116913619626622d, 73267460800591547471830798392868535206946944540724d, 76841822524674417161514036427982273348055556214818d, 97142617910342598647204516893989422179826088076852d, 87783646182799346313767754307809363333018982642090d, 10848802521674670883215120185883543223812876952786d, 71329612474782464538636993009049310363619763878039d, 62184073572399794223406235393808339651327408011116d, 66627891981488087797941876876144230030984490851411d, 60661826293682836764744779239180335110989069790714d, 85786944089552990653640447425576083659976645795096d, 66024396409905389607120198219976047599490197230297d, 64913982680032973156037120041377903785566085089252d, 16730939319872750275468906903707539413042652315011d, 94809377245048795150954100921645863754710598436791d, 78639167021187492431995700641917969777599028300699d, 15368713711936614952811305876380278410754449733078d, 40789923115535562561142322423255033685442488917353d, 44889911501440648020369068063960672322193204149535d, 41503128880339536053299340368006977710650566631954d, 81234880673210146739058568557934581403627822703280d, 82616570773948327592232845941706525094512325230608d, 22918802058777319719839450180888072429661980811197d, 77158542502016545090413245809786882778948721859617d, 72107838435069186155435662884062257473692284509516d, 20849603980134001723930671666823555245252804609722d, 53503534226472524250874054075591789781264330331690d); // 13
			//long answer = FindLongestCollatzChain(1000000); // 14
			//long answer = CountSquareLatticePaths(20); // 15 // 137846528820
			//long answer = CountSquareLatticePathsUsingPascalsTriangle(10, true); // 15 // 137846528820
			//long answer = SumDigitsPowerOfTwo(1000, true); // 16
			//long answer = CountLettersInNumberWords(1000, true); // 17
			//int[] r1 = { 75 }, r2 = { 95, 64 }, r3 = { 17, 47, 82 }, r4 = { 18, 35, 87, 10 }, r5 = { 20, 04, 82, 47, 65 }, r6 = { 19, 01, 23, 75, 03, 34 }, r7 = { 88, 02, 77, 73, 07, 63, 67 }, r8 = { 99, 65, 04, 28, 06, 16, 70, 92 }, r9 = { 41, 41, 26, 56, 83, 40, 80, 70, 33 }, r10 = { 41, 48, 72, 33, 47, 32, 37, 16, 94, 29 }, r11 = { 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14 }, r12 = { 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57 }, r13 = { 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48 }, r14 = { 63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31 }, r15 = { 04, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 04, 23 };
			//long answer = FindMaxPathSum(new int[][] { r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15 } ); // 18
			//long answer = CountSundaysOnFirstOfMonthIn20thCentury(true); // 19
			//long answer = SumDigitsOfFactorial(100, true); // 20
			//long answer = SumAmicableNumbers(10000, true); // 21
			//long answer = SumNameScores("MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA","CAROL","RUTH","SHARON","MICHELLE","LAURA","SARAH","KIMBERLY","DEBORAH","JESSICA","SHIRLEY","CYNTHIA","ANGELA","MELISSA","BRENDA","AMY","ANNA","REBECCA","VIRGINIA","KATHLEEN","PAMELA","MARTHA","DEBRA","AMANDA","STEPHANIE","CAROLYN","CHRISTINE","MARIE","JANET","CATHERINE","FRANCES","ANN","JOYCE","DIANE","ALICE","JULIE","HEATHER","TERESA","DORIS","GLORIA","EVELYN","JEAN","CHERYL","MILDRED","KATHERINE","JOAN","ASHLEY","JUDITH","ROSE","JANICE","KELLY","NICOLE","JUDY","CHRISTINA","KATHY","THERESA","BEVERLY","DENISE","TAMMY","IRENE","JANE","LORI","RACHEL","MARILYN","ANDREA","KATHRYN","LOUISE","SARA","ANNE","JACQUELINE","WANDA","BONNIE","JULIA","RUBY","LOIS","TINA","PHYLLIS","NORMA","PAULA","DIANA","ANNIE","LILLIAN","EMILY","ROBIN","PEGGY","CRYSTAL","GLADYS","RITA","DAWN","CONNIE","FLORENCE","TRACY","EDNA","TIFFANY","CARMEN","ROSA","CINDY","GRACE","WENDY","VICTORIA","EDITH","KIM","SHERRY","SYLVIA","JOSEPHINE","THELMA","SHANNON","SHEILA","ETHEL","ELLEN","ELAINE","MARJORIE","CARRIE","CHARLOTTE","MONICA","ESTHER","PAULINE","EMMA","JUANITA","ANITA","RHONDA","HAZEL","AMBER","EVA","DEBBIE","APRIL","LESLIE","CLARA","LUCILLE","JAMIE","JOANNE","ELEANOR","VALERIE","DANIELLE","MEGAN","ALICIA","SUZANNE","MICHELE","GAIL","BERTHA","DARLENE","VERONICA","JILL","ERIN","GERALDINE","LAUREN","CATHY","JOANN","LORRAINE","LYNN","SALLY","REGINA","ERICA","BEATRICE","DOLORES","BERNICE","AUDREY","YVONNE","ANNETTE","JUNE","SAMANTHA","MARION","DANA","STACY","ANA","RENEE","IDA","VIVIAN","ROBERTA","HOLLY","BRITTANY","MELANIE","LORETTA","YOLANDA","JEANETTE","LAURIE","KATIE","KRISTEN","VANESSA","ALMA","SUE","ELSIE","BETH","JEANNE","VICKI","CARLA","TARA","ROSEMARY","EILEEN","TERRI","GERTRUDE","LUCY","TONYA","ELLA","STACEY","WILMA","GINA","KRISTIN","JESSIE","NATALIE","AGNES","VERA","WILLIE","CHARLENE","BESSIE","DELORES","MELINDA","PEARL","ARLENE","MAUREEN","COLLEEN","ALLISON","TAMARA","JOY","GEORGIA","CONSTANCE","LILLIE","CLAUDIA","JACKIE","MARCIA","TANYA","NELLIE","MINNIE","MARLENE","HEIDI","GLENDA","LYDIA","VIOLA","COURTNEY","MARIAN","STELLA","CAROLINE","DORA","JO","VICKIE","MATTIE","TERRY","MAXINE","IRMA","MABEL","MARSHA","MYRTLE","LENA","CHRISTY","DEANNA","PATSY","HILDA","GWENDOLYN","JENNIE","NORA","MARGIE","NINA","CASSANDRA","LEAH","PENNY","KAY","PRISCILLA","NAOMI","CAROLE","BRANDY","OLGA","BILLIE","DIANNE","TRACEY","LEONA","JENNY","FELICIA","SONIA","MIRIAM","VELMA","BECKY","BOBBIE","VIOLET","KRISTINA","TONI","MISTY","MAE","SHELLY","DAISY","RAMONA","SHERRI","ERIKA","KATRINA","CLAIRE","LINDSEY","LINDSAY","GENEVA","GUADALUPE","BELINDA","MARGARITA","SHERYL","CORA","FAYE","ADA","NATASHA","SABRINA","ISABEL","MARGUERITE","HATTIE","HARRIET","MOLLY","CECILIA","KRISTI","BRANDI","BLANCHE","SANDY","ROSIE","JOANNA","IRIS","EUNICE","ANGIE","INEZ","LYNDA","MADELINE","AMELIA","ALBERTA","GENEVIEVE","MONIQUE","JODI","JANIE","MAGGIE","KAYLA","SONYA","JAN","LEE","KRISTINE","CANDACE","FANNIE","MARYANN","OPAL","ALISON","YVETTE","MELODY","LUZ","SUSIE","OLIVIA","FLORA","SHELLEY","KRISTY","MAMIE","LULA","LOLA","VERNA","BEULAH","ANTOINETTE","CANDICE","JUANA","JEANNETTE","PAM","KELLI","HANNAH","WHITNEY","BRIDGET","KARLA","CELIA","LATOYA","PATTY","SHELIA","GAYLE","DELLA","VICKY","LYNNE","SHERI","MARIANNE","KARA","JACQUELYN","ERMA","BLANCA","MYRA","LETICIA","PAT","KRISTA","ROXANNE","ANGELICA","JOHNNIE","ROBYN","FRANCIS","ADRIENNE","ROSALIE","ALEXANDRA","BROOKE","BETHANY","SADIE","BERNADETTE","TRACI","JODY","KENDRA","JASMINE","NICHOLE","RACHAEL","CHELSEA","MABLE","ERNESTINE","MURIEL","MARCELLA","ELENA","KRYSTAL","ANGELINA","NADINE","KARI","ESTELLE","DIANNA","PAULETTE","LORA","MONA","DOREEN","ROSEMARIE","ANGEL","DESIREE","ANTONIA","HOPE","GINGER","JANIS","BETSY","CHRISTIE","FREDA","MERCEDES","MEREDITH","LYNETTE","TERI","CRISTINA","EULA","LEIGH","MEGHAN","SOPHIA","ELOISE","ROCHELLE","GRETCHEN","CECELIA","RAQUEL","HENRIETTA","ALYSSA","JANA","KELLEY","GWEN","KERRY","JENNA","TRICIA","LAVERNE","OLIVE","ALEXIS","TASHA","SILVIA","ELVIRA","CASEY","DELIA","SOPHIE","KATE","PATTI","LORENA","KELLIE","SONJA","LILA","LANA","DARLA","MAY","MINDY","ESSIE","MANDY","LORENE","ELSA","JOSEFINA","JEANNIE","MIRANDA","DIXIE","LUCIA","MARTA","FAITH","LELA","JOHANNA","SHARI","CAMILLE","TAMI","SHAWNA","ELISA","EBONY","MELBA","ORA","NETTIE","TABITHA","OLLIE","JAIME","WINIFRED","KRISTIE","MARINA","ALISHA","AIMEE","RENA","MYRNA","MARLA","TAMMIE","LATASHA","BONITA","PATRICE","RONDA","SHERRIE","ADDIE","FRANCINE","DELORIS","STACIE","ADRIANA","CHERI","SHELBY","ABIGAIL","CELESTE","JEWEL","CARA","ADELE","REBEKAH","LUCINDA","DORTHY","CHRIS","EFFIE","TRINA","REBA","SHAWN","SALLIE","AURORA","LENORA","ETTA","LOTTIE","KERRI","TRISHA","NIKKI","ESTELLA","FRANCISCA","JOSIE","TRACIE","MARISSA","KARIN","BRITTNEY","JANELLE","LOURDES","LAUREL","HELENE","FERN","ELVA","CORINNE","KELSEY","INA","BETTIE","ELISABETH","AIDA","CAITLIN","INGRID","IVA","EUGENIA","CHRISTA","GOLDIE","CASSIE","MAUDE","JENIFER","THERESE","FRANKIE","DENA","LORNA","JANETTE","LATONYA","CANDY","MORGAN","CONSUELO","TAMIKA","ROSETTA","DEBORA","CHERIE","POLLY","DINA","JEWELL","FAY","JILLIAN","DOROTHEA","NELL","TRUDY","ESPERANZA","PATRICA","KIMBERLEY","SHANNA","HELENA","CAROLINA","CLEO","STEFANIE","ROSARIO","OLA","JANINE","MOLLIE","LUPE","ALISA","LOU","MARIBEL","SUSANNE","BETTE","SUSANA","ELISE","CECILE","ISABELLE","LESLEY","JOCELYN","PAIGE","JONI","RACHELLE","LEOLA","DAPHNE","ALTA","ESTER","PETRA","GRACIELA","IMOGENE","JOLENE","KEISHA","LACEY","GLENNA","GABRIELA","KERI","URSULA","LIZZIE","KIRSTEN","SHANA","ADELINE","MAYRA","JAYNE","JACLYN","GRACIE","SONDRA","CARMELA","MARISA","ROSALIND","CHARITY","TONIA","BEATRIZ","MARISOL","CLARICE","JEANINE","SHEENA","ANGELINE","FRIEDA","LILY","ROBBIE","SHAUNA","MILLIE","CLAUDETTE","CATHLEEN","ANGELIA","GABRIELLE","AUTUMN","KATHARINE","SUMMER","JODIE","STACI","LEA","CHRISTI","JIMMIE","JUSTINE","ELMA","LUELLA","MARGRET","DOMINIQUE","SOCORRO","RENE","MARTINA","MARGO","MAVIS","CALLIE","BOBBI","MARITZA","LUCILE","LEANNE","JEANNINE","DEANA","AILEEN","LORIE","LADONNA","WILLA","MANUELA","GALE","SELMA","DOLLY","SYBIL","ABBY","LARA","DALE","IVY","DEE","WINNIE","MARCY","LUISA","JERI","MAGDALENA","OFELIA","MEAGAN","AUDRA","MATILDA","LEILA","CORNELIA","BIANCA","SIMONE","BETTYE","RANDI","VIRGIE","LATISHA","BARBRA","GEORGINA","ELIZA","LEANN","BRIDGETTE","RHODA","HALEY","ADELA","NOLA","BERNADINE","FLOSSIE","ILA","GRETA","RUTHIE","NELDA","MINERVA","LILLY","TERRIE","LETHA","HILARY","ESTELA","VALARIE","BRIANNA","ROSALYN","EARLINE","CATALINA","AVA","MIA","CLARISSA","LIDIA","CORRINE","ALEXANDRIA","CONCEPCION","TIA","SHARRON","RAE","DONA","ERICKA","JAMI","ELNORA","CHANDRA","LENORE","NEVA","MARYLOU","MELISA","TABATHA","SERENA","AVIS","ALLIE","SOFIA","JEANIE","ODESSA","NANNIE","HARRIETT","LORAINE","PENELOPE","MILAGROS","EMILIA","BENITA","ALLYSON","ASHLEE","TANIA","TOMMIE","ESMERALDA","KARINA","EVE","PEARLIE","ZELMA","MALINDA","NOREEN","TAMEKA","SAUNDRA","HILLARY","AMIE","ALTHEA","ROSALINDA","JORDAN","LILIA","ALANA","GAY","CLARE","ALEJANDRA","ELINOR","MICHAEL","LORRIE","JERRI","DARCY","EARNESTINE","CARMELLA","TAYLOR","NOEMI","MARCIE","LIZA","ANNABELLE","LOUISA","EARLENE","MALLORY","CARLENE","NITA","SELENA","TANISHA","KATY","JULIANNE","JOHN","LAKISHA","EDWINA","MARICELA","MARGERY","KENYA","DOLLIE","ROXIE","ROSLYN","KATHRINE","NANETTE","CHARMAINE","LAVONNE","ILENE","KRIS","TAMMI","SUZETTE","CORINE","KAYE","JERRY","MERLE","CHRYSTAL","LINA","DEANNE","LILIAN","JULIANA","ALINE","LUANN","KASEY","MARYANNE","EVANGELINE","COLETTE","MELVA","LAWANDA","YESENIA","NADIA","MADGE","KATHIE","EDDIE","OPHELIA","VALERIA","NONA","MITZI","MARI","GEORGETTE","CLAUDINE","FRAN","ALISSA","ROSEANN","LAKEISHA","SUSANNA","REVA","DEIDRE","CHASITY","SHEREE","CARLY","JAMES","ELVIA","ALYCE","DEIRDRE","GENA","BRIANA","ARACELI","KATELYN","ROSANNE","WENDI","TESSA","BERTA","MARVA","IMELDA","MARIETTA","MARCI","LEONOR","ARLINE","SASHA","MADELYN","JANNA","JULIETTE","DEENA","AURELIA","JOSEFA","AUGUSTA","LILIANA","YOUNG","CHRISTIAN","LESSIE","AMALIA","SAVANNAH","ANASTASIA","VILMA","NATALIA","ROSELLA","LYNNETTE","CORINA","ALFREDA","LEANNA","CAREY","AMPARO","COLEEN","TAMRA","AISHA","WILDA","KARYN","CHERRY","QUEEN","MAURA","MAI","EVANGELINA","ROSANNA","HALLIE","ERNA","ENID","MARIANA","LACY","JULIET","JACKLYN","FREIDA","MADELEINE","MARA","HESTER","CATHRYN","LELIA","CASANDRA","BRIDGETT","ANGELITA","JANNIE","DIONNE","ANNMARIE","KATINA","BERYL","PHOEBE","MILLICENT","KATHERYN","DIANN","CARISSA","MARYELLEN","LIZ","LAURI","HELGA","GILDA","ADRIAN","RHEA","MARQUITA","HOLLIE","TISHA","TAMERA","ANGELIQUE","FRANCESCA","BRITNEY","KAITLIN","LOLITA","FLORINE","ROWENA","REYNA","TWILA","FANNY","JANELL","INES","CONCETTA","BERTIE","ALBA","BRIGITTE","ALYSON","VONDA","PANSY","ELBA","NOELLE","LETITIA","KITTY","DEANN","BRANDIE","LOUELLA","LETA","FELECIA","SHARLENE","LESA","BEVERLEY","ROBERT","ISABELLA","HERMINIA","TERRA","CELINA","TORI","OCTAVIA","JADE","DENICE","GERMAINE","SIERRA","MICHELL","CORTNEY","NELLY","DORETHA","SYDNEY","DEIDRA","MONIKA","LASHONDA","JUDI","CHELSEY","ANTIONETTE","MARGOT","BOBBY","ADELAIDE","NAN","LEEANN","ELISHA","DESSIE","LIBBY","KATHI","GAYLA","LATANYA","MINA","MELLISA","KIMBERLEE","JASMIN","RENAE","ZELDA","ELDA","MA","JUSTINA","GUSSIE","EMILIE","CAMILLA","ABBIE","ROCIO","KAITLYN","JESSE","EDYTHE","ASHLEIGH","SELINA","LAKESHA","GERI","ALLENE","PAMALA","MICHAELA","DAYNA","CARYN","ROSALIA","SUN","JACQULINE","REBECA","MARYBETH","KRYSTLE","IOLA","DOTTIE","BENNIE","BELLE","AUBREY","GRISELDA","ERNESTINA","ELIDA","ADRIANNE","DEMETRIA","DELMA","CHONG","JAQUELINE","DESTINY","ARLEEN","VIRGINA","RETHA","FATIMA","TILLIE","ELEANORE","CARI","TREVA","BIRDIE","WILHELMINA","ROSALEE","MAURINE","LATRICE","YONG","JENA","TARYN","ELIA","DEBBY","MAUDIE","JEANNA","DELILAH","CATRINA","SHONDA","HORTENCIA","THEODORA","TERESITA","ROBBIN","DANETTE","MARYJANE","FREDDIE","DELPHINE","BRIANNE","NILDA","DANNA","CINDI","BESS","IONA",
			//	"HANNA","ARIEL","WINONA","VIDA","ROSITA","MARIANNA","WILLIAM","RACHEAL","GUILLERMINA","ELOISA","CELESTINE","CAREN","MALISSA","LONA","CHANTEL","SHELLIE","MARISELA","LEORA","AGATHA","SOLEDAD","MIGDALIA","IVETTE","CHRISTEN","ATHENA","JANEL","CHLOE","VEDA","PATTIE","TESSIE","TERA","MARILYNN","LUCRETIA","KARRIE","DINAH","DANIELA","ALECIA","ADELINA","VERNICE","SHIELA","PORTIA","MERRY","LASHAWN","DEVON","DARA","TAWANA","OMA","VERDA","CHRISTIN","ALENE","ZELLA","SANDI","RAFAELA","MAYA","KIRA","CANDIDA","ALVINA","SUZAN","SHAYLA","LYN","LETTIE","ALVA","SAMATHA","ORALIA","MATILDE","MADONNA","LARISSA","VESTA","RENITA","INDIA","DELOIS","SHANDA","PHILLIS","LORRI","ERLINDA","CRUZ","CATHRINE","BARB","ZOE","ISABELL","IONE","GISELA","CHARLIE","VALENCIA","ROXANNA","MAYME","KISHA","ELLIE","MELLISSA","DORRIS","DALIA","BELLA","ANNETTA","ZOILA","RETA","REINA","LAURETTA","KYLIE","CHRISTAL","PILAR","CHARLA","ELISSA","TIFFANI","TANA","PAULINA","LEOTA","BREANNA","JAYME","CARMEL","VERNELL","TOMASA","MANDI","DOMINGA","SANTA","MELODIE","LURA","ALEXA","TAMELA","RYAN","MIRNA","KERRIE","VENUS","NOEL","FELICITA","CRISTY","CARMELITA","BERNIECE","ANNEMARIE","TIARA","ROSEANNE","MISSY","CORI","ROXANA","PRICILLA","KRISTAL","JUNG","ELYSE","HAYDEE","ALETHA","BETTINA","MARGE","GILLIAN","FILOMENA","CHARLES","ZENAIDA","HARRIETTE","CARIDAD","VADA","UNA","ARETHA","PEARLINE","MARJORY","MARCELA","FLOR","EVETTE","ELOUISE","ALINA","TRINIDAD","DAVID","DAMARIS","CATHARINE","CARROLL","BELVA","NAKIA","MARLENA","LUANNE","LORINE","KARON","DORENE","DANITA","BRENNA","TATIANA","SAMMIE","LOUANN","LOREN","JULIANNA","ANDRIA","PHILOMENA","LUCILA","LEONORA","DOVIE","ROMONA","MIMI","JACQUELIN","GAYE","TONJA","MISTI","JOE","GENE","CHASTITY","STACIA","ROXANN","MICAELA","NIKITA","MEI","VELDA","MARLYS","JOHNNA","AURA","LAVERN","IVONNE","HAYLEY","NICKI","MAJORIE","HERLINDA","GEORGE","ALPHA","YADIRA","PERLA","GREGORIA","DANIEL","ANTONETTE","SHELLI","MOZELLE","MARIAH","JOELLE","CORDELIA","JOSETTE","CHIQUITA","TRISTA","LOUIS","LAQUITA","GEORGIANA","CANDI","SHANON","LONNIE","HILDEGARD","CECIL","VALENTINA","STEPHANY","MAGDA","KAROL","GERRY","GABRIELLA","TIANA","ROMA","RICHELLE","RAY","PRINCESS","OLETA","JACQUE","IDELLA","ALAINA","SUZANNA","JOVITA","BLAIR","TOSHA","RAVEN","NEREIDA","MARLYN","KYLA","JOSEPH","DELFINA","TENA","STEPHENIE","SABINA","NATHALIE","MARCELLE","GERTIE","DARLEEN","THEA","SHARONDA","SHANTEL","BELEN","VENESSA","ROSALINA","ONA","GENOVEVA","COREY","CLEMENTINE","ROSALBA","RENATE","RENATA","MI","IVORY","GEORGIANNA","FLOY","DORCAS","ARIANA","TYRA","THEDA","MARIAM","JULI","JESICA","DONNIE","VIKKI","VERLA","ROSELYN","MELVINA","JANNETTE","GINNY","DEBRAH","CORRIE","ASIA","VIOLETA","MYRTIS","LATRICIA","COLLETTE","CHARLEEN","ANISSA","VIVIANA","TWYLA","PRECIOUS","NEDRA","LATONIA","LAN","HELLEN","FABIOLA","ANNAMARIE","ADELL","SHARYN","CHANTAL","NIKI","MAUD","LIZETTE","LINDY","KIA","KESHA","JEANA","DANELLE","CHARLINE","CHANEL","CARROL","VALORIE","LIA","DORTHA","CRISTAL","SUNNY","LEONE","LEILANI","GERRI","DEBI","ANDRA","KESHIA","IMA","EULALIA","EASTER","DULCE","NATIVIDAD","LINNIE","KAMI","GEORGIE","CATINA","BROOK","ALDA","WINNIFRED","SHARLA","RUTHANN","MEAGHAN","MAGDALENE","LISSETTE","ADELAIDA","VENITA","TRENA","SHIRLENE","SHAMEKA","ELIZEBETH","DIAN","SHANTA","MICKEY","LATOSHA","CARLOTTA","WINDY","SOON","ROSINA","MARIANN","LEISA","JONNIE","DAWNA","CATHIE","BILLY","ASTRID","SIDNEY","LAUREEN","JANEEN","HOLLI","FAWN","VICKEY","TERESSA","SHANTE","RUBYE","MARCELINA","CHANDA","CARY","TERESE","SCARLETT","MARTY","MARNIE","LULU","LISETTE","JENIFFER","ELENOR","DORINDA","DONITA","CARMAN","BERNITA","ALTAGRACIA","ALETA","ADRIANNA","ZORAIDA","RONNIE","NICOLA","LYNDSEY","KENDALL","JANINA","CHRISSY","AMI","STARLA","PHYLIS","PHUONG","KYRA","CHARISSE","BLANCH","SANJUANITA","RONA","NANCI","MARILEE","MARANDA","CORY","BRIGETTE","SANJUANA","MARITA","KASSANDRA","JOYCELYN","IRA","FELIPA","CHELSIE","BONNY","MIREYA","LORENZA","KYONG","ILEANA","CANDELARIA","TONY","TOBY","SHERIE","OK","MARK","LUCIE","LEATRICE","LAKESHIA","GERDA","EDIE","BAMBI","MARYLIN","LAVON","HORTENSE","GARNET","EVIE","TRESSA","SHAYNA","LAVINA","KYUNG","JEANETTA","SHERRILL","SHARA","PHYLISS","MITTIE","ANABEL","ALESIA","THUY","TAWANDA","RICHARD","JOANIE","TIFFANIE","LASHANDA","KARISSA","ENRIQUETA","DARIA","DANIELLA","CORINNA","ALANNA","ABBEY","ROXANE","ROSEANNA","MAGNOLIA","LIDA","KYLE","JOELLEN","ERA","CORAL","CARLEEN","TRESA","PEGGIE","NOVELLA","NILA","MAYBELLE","JENELLE","CARINA","NOVA","MELINA","MARQUERITE","MARGARETTE","JOSEPHINA","EVONNE","DEVIN","CINTHIA","ALBINA","TOYA","TAWNYA","SHERITA","SANTOS","MYRIAM","LIZABETH","LISE","KEELY","JENNI","GISELLE","CHERYLE","ARDITH","ARDIS","ALESHA","ADRIANE","SHAINA","LINNEA","KAROLYN","HONG","FLORIDA","FELISHA","DORI","DARCI","ARTIE","ARMIDA","ZOLA","XIOMARA","VERGIE","SHAMIKA","NENA","NANNETTE","MAXIE","LOVIE","JEANE","JAIMIE","INGE","FARRAH","ELAINA","CAITLYN","STARR","FELICITAS","CHERLY","CARYL","YOLONDA","YASMIN","TEENA","PRUDENCE","PENNIE","NYDIA","MACKENZIE","ORPHA","MARVEL","LIZBETH","LAURETTE","JERRIE","HERMELINDA","CAROLEE","TIERRA","MIRIAN","META","MELONY","KORI","JENNETTE","JAMILA","ENA","ANH","YOSHIKO","SUSANNAH","SALINA","RHIANNON","JOLEEN","CRISTINE","ASHTON","ARACELY","TOMEKA","SHALONDA","MARTI","LACIE","KALA","JADA","ILSE","HAILEY","BRITTANI","ZONA","SYBLE","SHERRYL","RANDY","NIDIA","MARLO","KANDICE","KANDI","DEB","DEAN","AMERICA","ALYCIA","TOMMY","RONNA","NORENE","MERCY","JOSE","INGEBORG","GIOVANNA","GEMMA","CHRISTEL","AUDRY","ZORA","VITA","VAN","TRISH","STEPHAINE","SHIRLEE","SHANIKA","MELONIE","MAZIE","JAZMIN","INGA","HOA","HETTIE","GERALYN","FONDA","ESTRELLA","ADELLA","SU","SARITA","RINA","MILISSA","MARIBETH","GOLDA","EVON","ETHELYN","ENEDINA","CHERISE","CHANA","VELVA","TAWANNA","SADE","MIRTA","LI","KARIE","JACINTA","ELNA","DAVINA","CIERRA","ASHLIE","ALBERTHA","TANESHA","STEPHANI","NELLE","MINDI","LU","LORINDA","LARUE","FLORENE","DEMETRA","DEDRA","CIARA","CHANTELLE","ASHLY","SUZY","ROSALVA","NOELIA","LYDA","LEATHA","KRYSTYNA","KRISTAN","KARRI","DARLINE","DARCIE","CINDA","CHEYENNE","CHERRIE","AWILDA","ALMEDA","ROLANDA","LANETTE","JERILYN","GISELE","EVALYN","CYNDI","CLETA","CARIN","ZINA","ZENA","VELIA","TANIKA","PAUL","CHARISSA","THOMAS","TALIA","MARGARETE","LAVONDA","KAYLEE","KATHLENE","JONNA","IRENA","ILONA","IDALIA","CANDIS","CANDANCE","BRANDEE","ANITRA","ALIDA","SIGRID","NICOLETTE","MARYJO","LINETTE","HEDWIG","CHRISTIANA","CASSIDY","ALEXIA","TRESSIE","MODESTA","LUPITA","LITA","GLADIS","EVELIA","DAVIDA","CHERRI","CECILY","ASHELY","ANNABEL","AGUSTINA","WANITA","SHIRLY","ROSAURA","HULDA","EUN","BAILEY","YETTA","VERONA","THOMASINA","SIBYL","SHANNAN","MECHELLE","LUE","LEANDRA","LANI","KYLEE","KANDY","JOLYNN","FERNE","EBONI","CORENE","ALYSIA","ZULA","NADA","MOIRA","LYNDSAY","LORRETTA","JUAN","JAMMIE","HORTENSIA","GAYNELL","CAMERON","ADRIA","VINA","VICENTA","TANGELA","STEPHINE","NORINE","NELLA","LIANA","LESLEE","KIMBERELY","ILIANA","GLORY","FELICA","EMOGENE","ELFRIEDE","EDEN","EARTHA","CARMA","BEA","OCIE","MARRY","LENNIE","KIARA","JACALYN","CARLOTA","ARIELLE","YU","STAR","OTILIA","KIRSTIN","KACEY","JOHNETTA","JOEY","JOETTA","JERALDINE","JAUNITA","ELANA","DORTHEA","CAMI","AMADA","ADELIA","VERNITA","TAMAR","SIOBHAN","RENEA","RASHIDA","OUIDA","ODELL","NILSA","MERYL","KRISTYN","JULIETA","DANICA","BREANNE","AUREA","ANGLEA","SHERRON","ODETTE","MALIA","LORELEI","LIN","LEESA","KENNA","KATHLYN","FIONA","CHARLETTE","SUZIE","SHANTELL","SABRA","RACQUEL","MYONG","MIRA","MARTINE","LUCIENNE","LAVADA","JULIANN","JOHNIE","ELVERA","DELPHIA","CLAIR","CHRISTIANE","CHAROLETTE","CARRI","AUGUSTINE","ASHA","ANGELLA","PAOLA","NINFA","LEDA","LAI","EDA","SUNSHINE","STEFANI","SHANELL","PALMA","MACHELLE","LISSA","KECIA","KATHRYNE","KARLENE","JULISSA","JETTIE","JENNIFFER","HUI","CORRINA","CHRISTOPHER","CAROLANN","ALENA","TESS","ROSARIA","MYRTICE","MARYLEE","LIANE","KENYATTA","JUDIE","JANEY","IN","ELMIRA","ELDORA","DENNA","CRISTI","CATHI","ZAIDA","VONNIE","VIVA","VERNIE","ROSALINE","MARIELA","LUCIANA","LESLI","KARAN","FELICE","DENEEN","ADINA","WYNONA","TARSHA","SHERON","SHASTA","SHANITA","SHANI","SHANDRA","RANDA","PINKIE","PARIS","NELIDA","MARILOU","LYLA","LAURENE","LACI","JOI","JANENE","DOROTHA","DANIELE","DANI","CAROLYNN","CARLYN","BERENICE","AYESHA","ANNELIESE","ALETHEA","THERSA","TAMIKO","RUFINA","OLIVA","MOZELL","MARYLYN","MADISON","KRISTIAN","KATHYRN","KASANDRA","KANDACE","JANAE","GABRIEL","DOMENICA","DEBBRA","DANNIELLE","CHUN","BUFFY","BARBIE","ARCELIA","AJA","ZENOBIA","SHAREN","SHAREE","PATRICK","PAGE","MY","LAVINIA","KUM","KACIE","JACKELINE","HUONG","FELISA","EMELIA","ELEANORA","CYTHIA","CRISTIN","CLYDE","CLARIBEL","CARON","ANASTACIA","ZULMA","ZANDRA","YOKO","TENISHA","SUSANN","SHERILYN","SHAY","SHAWANDA","SABINE","ROMANA","MATHILDA","LINSEY","KEIKO","JOANA","ISELA","GRETTA","GEORGETTA","EUGENIE","DUSTY","DESIRAE","DELORA","CORAZON","ANTONINA","ANIKA","WILLENE","TRACEE","TAMATHA","REGAN","NICHELLE","MICKIE","MAEGAN","LUANA","LANITA","KELSIE","EDELMIRA","BREE","AFTON","TEODORA","TAMIE","SHENA","MEG","LINH","KELI","KACI","DANYELLE","BRITT","ARLETTE","ALBERTINE","ADELLE","TIFFINY","STORMY","SIMONA","NUMBERS","NICOLASA","NICHOL","NIA","NAKISHA","MEE","MAIRA","LOREEN","KIZZY","JOHNNY","JAY","FALLON","CHRISTENE","BOBBYE","ANTHONY","YING","VINCENZA","TANJA","RUBIE","RONI","QUEENIE","MARGARETT","KIMBERLI","IRMGARD","IDELL","HILMA","EVELINA","ESTA","EMILEE","DENNISE","DANIA","CARL","CARIE","ANTONIO","WAI","SANG","RISA","RIKKI","PARTICIA","MUI","MASAKO","MARIO","LUVENIA","LOREE","LONI","LIEN","KEVIN","GIGI","FLORENCIA","DORIAN","DENITA","DALLAS","CHI","BILLYE","ALEXANDER","TOMIKA","SHARITA","RANA","NIKOLE","NEOMA","MARGARITE","MADALYN","LUCINA","LAILA","KALI","JENETTE","GABRIELE","EVELYNE","ELENORA","CLEMENTINA","ALEJANDRINA","ZULEMA","VIOLETTE","VANNESSA","THRESA","RETTA","PIA","PATIENCE","NOELLA","NICKIE","JONELL","DELTA","CHUNG","CHAYA","CAMELIA","BETHEL","ANYA","ANDREW","THANH","SUZANN","SPRING","SHU","MILA","LILLA","LAVERNA","KEESHA","KATTIE","GIA","GEORGENE","EVELINE","ESTELL","ELIZBETH",
			//	"VIVIENNE","VALLIE","TRUDIE","STEPHANE","MICHEL","MAGALY","MADIE","KENYETTA","KARREN","JANETTA","HERMINE","HARMONY","DRUCILLA","DEBBI","CELESTINA","CANDIE","BRITNI","BECKIE","AMINA","ZITA","YUN","YOLANDE","VIVIEN","VERNETTA","TRUDI","SOMMER","PEARLE","PATRINA","OSSIE","NICOLLE","LOYCE","LETTY","LARISA","KATHARINA","JOSELYN","JONELLE","JENELL","IESHA","HEIDE","FLORINDA","FLORENTINA","FLO","ELODIA","DORINE","BRUNILDA","BRIGID","ASHLI","ARDELLA","TWANA","THU","TARAH","SUNG","SHEA","SHAVON","SHANE","SERINA","RAYNA","RAMONITA","NGA","MARGURITE","LUCRECIA","KOURTNEY","KATI","JESUS","JESENIA","DIAMOND","CRISTA","AYANA","ALICA","ALIA","VINNIE","SUELLEN","ROMELIA","RACHELL","PIPER","OLYMPIA","MICHIKO","KATHALEEN","JOLIE","JESSI","JANESSA","HANA","HA","ELEASE","CARLETTA","BRITANY","SHONA","SALOME","ROSAMOND","REGENA","RAINA","NGOC","NELIA","LOUVENIA","LESIA","LATRINA","LATICIA","LARHONDA","JINA","JACKI","HOLLIS","HOLLEY","EMMY","DEEANN","CORETTA","ARNETTA","VELVET","THALIA","SHANICE","NETA","MIKKI","MICKI","LONNA","LEANA","LASHUNDA","KILEY","JOYE","JACQULYN","IGNACIA","HYUN","HIROKO","HENRY","HENRIETTE","ELAYNE","DELINDA","DARNELL","DAHLIA","COREEN","CONSUELA","CONCHITA","CELINE","BABETTE","AYANNA","ANETTE","ALBERTINA","SKYE","SHAWNEE","SHANEKA","QUIANA","PAMELIA","MIN","MERRI","MERLENE","MARGIT","KIESHA","KIERA","KAYLENE","JODEE","JENISE","ERLENE","EMMIE","ELSE","DARYL","DALILA","DAISEY","CODY","CASIE","BELIA","BABARA","VERSIE","VANESA","SHELBA","SHAWNDA","SAM","NORMAN","NIKIA","NAOMA","MARNA","MARGERET","MADALINE","LAWANA","KINDRA","JUTTA","JAZMINE","JANETT","HANNELORE","GLENDORA","GERTRUD","GARNETT","FREEDA","FREDERICA","FLORANCE","FLAVIA","DENNIS","CARLINE","BEVERLEE","ANJANETTE","VALDA","TRINITY","TAMALA","STEVIE","SHONNA","SHA","SARINA","ONEIDA","MICAH","MERILYN","MARLEEN","LURLINE","LENNA","KATHERIN","JIN","JENI","HAE","GRACIA","GLADY","FARAH","ERIC","ENOLA","EMA","DOMINQUE","DEVONA","DELANA","CECILA","CAPRICE","ALYSHA","ALI","ALETHIA","VENA","THERESIA","TAWNY","SONG","SHAKIRA","SAMARA","SACHIKO","RACHELE","PAMELLA","NICKY","MARNI","MARIEL","MAREN","MALISA","LIGIA","LERA","LATORIA","LARAE","KIMBER","KATHERN","KAREY","JENNEFER","JANETH","HALINA","FREDIA","DELISA","DEBROAH","CIERA","CHIN","ANGELIKA","ANDREE","ALTHA","YEN","VIVAN","TERRESA","TANNA","SUK","SUDIE","SOO","SIGNE","SALENA","RONNI","REBBECCA","MYRTIE","MCKENZIE","MALIKA","MAIDA","LOAN","LEONARDA","KAYLEIGH","FRANCE","ETHYL","ELLYN","DAYLE","CAMMIE","BRITTNI","BIRGIT","AVELINA","ASUNCION","ARIANNA","AKIKO","VENICE","TYESHA","TONIE","TIESHA","TAKISHA","STEFFANIE","SINDY","SANTANA","MEGHANN","MANDA","MACIE","LADY","KELLYE","KELLEE","JOSLYN","JASON","INGER","INDIRA","GLINDA","GLENNIS","FERNANDA","FAUSTINA","ENEIDA","ELICIA","DOT","DIGNA","DELL","ARLETTA","ANDRE","WILLIA","TAMMARA","TABETHA","SHERRELL","SARI","REFUGIO","REBBECA","PAULETTA","NIEVES","NATOSHA","NAKITA","MAMMIE","KENISHA","KAZUKO","KASSIE","GARY","EARLEAN","DAPHINE","CORLISS","CLOTILDE","CAROLYNE","BERNETTA","AUGUSTINA","AUDREA","ANNIS","ANNABELL","YAN","TENNILLE","TAMICA","SELENE","SEAN","ROSANA","REGENIA","QIANA","MARKITA","MACY","LEEANNE","LAURINE","KYM","JESSENIA","JANITA","GEORGINE","GENIE","EMIKO","ELVIE","DEANDRA","DAGMAR","CORIE","COLLEN","CHERISH","ROMAINE","PORSHA","PEARLENE","MICHELINE","MERNA","MARGORIE","MARGARETTA","LORE","KENNETH","JENINE","HERMINA","FREDERICKA","ELKE","DRUSILLA","DORATHY","DIONE","DESIRE","CELENA","BRIGIDA","ANGELES","ALLEGRA","THEO","TAMEKIA","SYNTHIA","STEPHEN","SOOK","SLYVIA","ROSANN","REATHA","RAYE","MARQUETTA","MARGART","LING","LAYLA","KYMBERLY","KIANA","KAYLEEN","KATLYN","KARMEN","JOELLA","IRINA","EMELDA","ELENI","DETRA","CLEMMIE","CHERYLL","CHANTELL","CATHEY","ARNITA","ARLA","ANGLE","ANGELIC","ALYSE","ZOFIA","THOMASINE","TENNIE","SON","SHERLY","SHERLEY","SHARYL","REMEDIOS","PETRINA","NICKOLE","MYUNG","MYRLE","MOZELLA","LOUANNE","LISHA","LATIA","LANE","KRYSTA","JULIENNE","JOEL","JEANENE","JACQUALINE","ISAURA","GWENDA","EARLEEN","DONALD","CLEOPATRA","CARLIE","AUDIE","ANTONIETTA","ALISE","ALEX","VERDELL","VAL","TYLER","TOMOKO","THAO","TALISHA","STEVEN","SO","SHEMIKA","SHAUN","SCARLET","SAVANNA","SANTINA","ROSIA","RAEANN","ODILIA","NANA","MINNA","MAGAN","LYNELLE","LE","KARMA","JOEANN","IVANA","INELL","ILANA","HYE","HONEY","HEE","GUDRUN","FRANK","DREAMA","CRISSY","CHANTE","CARMELINA","ARVILLA","ARTHUR","ANNAMAE","ALVERA","ALEIDA","AARON","YEE","YANIRA","VANDA","TIANNA","TAM","STEFANIA","SHIRA","PERRY","NICOL","NANCIE","MONSERRATE","MINH","MELYNDA","MELANY","MATTHEW","LOVELLA","LAURE","KIRBY","KACY","JACQUELYNN","HYON","GERTHA","FRANCISCO","ELIANA","CHRISTENA","CHRISTEEN","CHARISE","CATERINA","CARLEY","CANDYCE","ARLENA","AMMIE","YANG","WILLETTE","VANITA","TUYET","TINY","SYREETA","SILVA","SCOTT","RONALD","PENNEY","NYLA","MICHAL","MAURICE","MARYAM","MARYA","MAGEN","LUDIE","LOMA","LIVIA","LANELL","KIMBERLIE","JULEE","DONETTA","DIEDRA","DENISHA","DEANE","DAWNE","CLARINE","CHERRYL","BRONWYN","BRANDON","ALLA","VALERY","TONDA","SUEANN","SORAYA","SHOSHANA","SHELA","SHARLEEN","SHANELLE","NERISSA","MICHEAL","MERIDITH","MELLIE","MAYE","MAPLE","MAGARET","LUIS","LILI","LEONILA","LEONIE","LEEANNA","LAVONIA","LAVERA","KRISTEL","KATHEY","KATHE","JUSTIN","JULIAN","JIMMY","JANN","ILDA","HILDRED","HILDEGARDE","GENIA","FUMIKO","EVELIN","ERMELINDA","ELLY","DUNG","DOLORIS","DIONNA","DANAE","BERNEICE","ANNICE","ALIX","VERENA","VERDIE","TRISTAN","SHAWNNA","SHAWANA","SHAUNNA","ROZELLA","RANDEE","RANAE","MILAGRO","LYNELL","LUISE","LOUIE","LOIDA","LISBETH","KARLEEN","JUNITA","JONA","ISIS","HYACINTH","HEDY","GWENN","ETHELENE","ERLINE","EDWARD","DONYA","DOMONIQUE","DELICIA","DANNETTE","CICELY","BRANDA","BLYTHE","BETHANN","ASHLYN","ANNALEE","ALLINE","YUKO","VELLA","TRANG","TOWANDA","TESHA","SHERLYN","NARCISA","MIGUELINA","MERI","MAYBELL","MARLANA","MARGUERITA","MADLYN","LUNA","LORY","LORIANN","LIBERTY","LEONORE","LEIGHANN","LAURICE","LATESHA","LARONDA","KATRICE","KASIE","KARL","KALEY","JADWIGA","GLENNIE","GEARLDINE","FRANCINA","EPIFANIA","DYAN","DORIE","DIEDRE","DENESE","DEMETRICE","DELENA","DARBY","CRISTIE","CLEORA","CATARINA","CARISA","BERNIE","BARBERA","ALMETA","TRULA","TEREASA","SOLANGE","SHEILAH","SHAVONNE","SANORA","ROCHELL","MATHILDE","MARGARETA","MAIA","LYNSEY","LAWANNA","LAUNA","KENA","KEENA","KATIA","JAMEY","GLYNDA","GAYLENE","ELVINA","ELANOR","DANUTA","DANIKA","CRISTEN","CORDIE","COLETTA","CLARITA","CARMON","BRYNN","AZUCENA","AUNDREA","ANGELE","YI","WALTER","VERLIE","VERLENE","TAMESHA","SILVANA","SEBRINA","SAMIRA","REDA","RAYLENE","PENNI","PANDORA","NORAH","NOMA","MIREILLE","MELISSIA","MARYALICE","LARAINE","KIMBERY","KARYL","KARINE","KAM","JOLANDA","JOHANA","JESUSA","JALEESA","JAE","JACQUELYNE","IRISH","ILUMINADA","HILARIA","HANH","GENNIE","FRANCIE","FLORETTA","EXIE","EDDA","DREMA","DELPHA","BEV","BARBAR","ASSUNTA","ARDELL","ANNALISA","ALISIA","YUKIKO","YOLANDO","WONDA","WEI","WALTRAUD","VETA","TEQUILA","TEMEKA","TAMEIKA","SHIRLEEN","SHENITA","PIEDAD","OZELLA","MIRTHA","MARILU","KIMIKO","JULIANE","JENICE","JEN","JANAY","JACQUILINE","HILDE","FE","FAE","EVAN","EUGENE","ELOIS","ECHO","DEVORAH","CHAU","BRINDA","BETSEY","ARMINDA","ARACELIS","APRYL","ANNETT","ALISHIA","VEOLA","USHA","TOSHIKO","THEOLA","TASHIA","TALITHA","SHERY","RUDY","RENETTA","REIKO","RASHEEDA","OMEGA","OBDULIA","MIKA","MELAINE","MEGGAN","MARTIN","MARLEN","MARGET","MARCELINE","MANA","MAGDALEN","LIBRADA","LEZLIE","LEXIE","LATASHIA","LASANDRA","KELLE","ISIDRA","ISA","INOCENCIA","GWYN","FRANCOISE","ERMINIA","ERINN","DIMPLE","DEVORA","CRISELDA","ARMANDA","ARIE","ARIANE","ANGELO","ANGELENA","ALLEN","ALIZA","ADRIENE","ADALINE","XOCHITL","TWANNA","TRAN","TOMIKO","TAMISHA","TAISHA","SUSY","SIU","RUTHA","ROXY","RHONA","RAYMOND","OTHA","NORIKO","NATASHIA","MERRIE","MELVIN","MARINDA","MARIKO","MARGERT","LORIS","LIZZETTE","LEISHA","KAILA","KA","JOANNIE","JERRICA","JENE","JANNET","JANEE","JACINDA","HERTA","ELENORE","DORETTA","DELAINE","DANIELL","CLAUDIE","CHINA","BRITTA","APOLONIA","AMBERLY","ALEASE","YURI","YUK","WEN","WANETA","UTE","TOMI","SHARRI","SANDIE","ROSELLE","REYNALDA","RAGUEL","PHYLICIA","PATRIA","OLIMPIA","ODELIA","MITZIE","MITCHELL","MISS","MINDA","MIGNON","MICA","MENDY","MARIVEL","MAILE","LYNETTA","LAVETTE","LAURYN","LATRISHA","LAKIESHA","KIERSTEN","KARY","JOSPHINE","JOLYN","JETTA","JANISE","JACQUIE","IVELISSE","GLYNIS","GIANNA","GAYNELLE","EMERALD","DEMETRIUS","DANYELL","DANILLE","DACIA","CORALEE","CHER","CEOLA","BRETT","BELL","ARIANNE","ALESHIA","YUNG","WILLIEMAE","TROY","TRINH","THORA","TAI","SVETLANA","SHERIKA","SHEMEKA","SHAUNDA","ROSELINE","RICKI","MELDA","MALLIE","LAVONNA","LATINA","LARRY","LAQUANDA","LALA","LACHELLE","KLARA","KANDIS","JOHNA","JEANMARIE","JAYE","HANG","GRAYCE","GERTUDE","EMERITA","EBONIE","CLORINDA","CHING","CHERY","CAROLA","BREANN","BLOSSOM","BERNARDINE","BECKI","ARLETHA","ARGELIA","ARA","ALITA","YULANDA","YON","YESSENIA","TOBI","TASIA","SYLVIE","SHIRL","SHIRELY","SHERIDAN","SHELLA","SHANTELLE","SACHA","ROYCE","REBECKA","REAGAN","PROVIDENCIA","PAULENE","MISHA","MIKI","MARLINE","MARICA","LORITA","LATOYIA","LASONYA","KERSTIN","KENDA","KEITHA","KATHRIN","JAYMIE","JACK","GRICELDA","GINETTE","ERYN","ELINA","ELFRIEDA","DANYEL","CHEREE","CHANELLE","BARRIE","AVERY","AURORE","ANNAMARIA","ALLEEN","AILENE","AIDE","YASMINE","VASHTI","VALENTINE","TREASA","TORY","TIFFANEY","SHERYLL","SHARIE","SHANAE","SAU","RAISA","PA","NEDA","MITSUKO","MIRELLA","MILDA","MARYANNA","MARAGRET","MABELLE","LUETTA","LORINA","LETISHA","LATARSHA","LANELLE","LAJUANA","KRISSY","KARLY","KARENA","JON","JESSIKA","JERICA","JEANELLE","JANUARY","JALISA","JACELYN","IZOLA","IVEY","GREGORY","EUNA","ETHA","DREW","DOMITILA","DOMINICA","DAINA","CREOLA","CARLI","CAMIE","BUNNY","BRITTNY","ASHANTI","ANISHA","ALEEN","ADAH","YASUKO","WINTER","VIKI","VALRIE","TONA","TINISHA","THI","TERISA","TATUM","TANEKA","SIMONNE","SHALANDA","SERITA","RESSIE","REFUGIA","PAZ","OLENE","NA","MERRILL","MARGHERITA","MANDIE","MAN","MAIRE","LYNDIA","LUCI","LORRIANE","LORETA","LEONIA","LAVONA","LASHAWNDA","LAKIA","KYOKO","KRYSTINA","KRYSTEN","KENIA",
			//	"KELSI","JUDE","JEANICE","ISOBEL","GEORGIANN","GENNY","FELICIDAD","EILENE","DEON","DELOISE","DEEDEE","DANNIE","CONCEPTION","CLORA","CHERILYN","CHANG","CALANDRA","BERRY","ARMANDINA","ANISA","ULA","TIMOTHY","TIERA","THERESSA","STEPHANIA","SIMA","SHYLA","SHONTA","SHERA","SHAQUITA","SHALA","SAMMY","ROSSANA","NOHEMI","NERY","MORIAH","MELITA","MELIDA","MELANI","MARYLYNN","MARISHA","MARIETTE","MALORIE","MADELENE","LUDIVINA","LORIA","LORETTE","LORALEE","LIANNE","LEON","LAVENIA","LAURINDA","LASHON","KIT","KIMI","KEILA","KATELYNN","KAI","JONE","JOANE","JI","JAYNA","JANELLA","JA","HUE","HERTHA","FRANCENE","ELINORE","DESPINA","DELSIE","DEEDRA","CLEMENCIA","CARRY","CAROLIN","CARLOS","BULAH","BRITTANIE","BOK","BLONDELL","BIBI","BEAULAH","BEATA","ANNITA","AGRIPINA","VIRGEN","VALENE","UN","TWANDA","TOMMYE","TOI","TARRA","TARI","TAMMERA","SHAKIA","SADYE","RUTHANNE","ROCHEL","RIVKA","PURA","NENITA","NATISHA","MING","MERRILEE","MELODEE","MARVIS","LUCILLA","LEENA","LAVETA","LARITA","LANIE","KEREN","ILEEN","GEORGEANN","GENNA","GENESIS","FRIDA","EWA","EUFEMIA","EMELY","ELA","EDYTH","DEONNA","DEADRA","DARLENA","CHANELL","CHAN","CATHERN","CASSONDRA","CASSAUNDRA","BERNARDA","BERNA","ARLINDA","ANAMARIA","ALBERT","WESLEY","VERTIE","VALERI","TORRI","TATYANA","STASIA","SHERISE","SHERILL","SEASON","SCOTTIE","SANDA","RUTHE","ROSY","ROBERTO","ROBBI","RANEE","QUYEN","PEARLY","PALMIRA","ONITA","NISHA","NIESHA","NIDA","NEVADA","NAM","MERLYN","MAYOLA","MARYLOUISE","MARYLAND","MARX","MARTH","MARGENE","MADELAINE","LONDA","LEONTINE","LEOMA","LEIA","LAWRENCE","LAURALEE","LANORA","LAKITA","KIYOKO","KETURAH","KATELIN","KAREEN","JONIE","JOHNETTE","JENEE","JEANETT","IZETTA","HIEDI","HEIKE","HASSIE","HAROLD","GIUSEPPINA","GEORGANN","FIDELA","FERNANDE","ELWANDA","ELLAMAE","ELIZ","DUSTI","DOTTY","CYNDY","CORALIE","CELESTA","ARGENTINA","ALVERTA","XENIA","WAVA","VANETTA","TORRIE","TASHINA","TANDY","TAMBRA","TAMA","STEPANIE","SHILA","SHAUNTA","SHARAN","SHANIQUA","SHAE","SETSUKO","SERAFINA","SANDEE","ROSAMARIA","PRISCILA","OLINDA","NADENE","MUOI","MICHELINA","MERCEDEZ","MARYROSE","MARIN","MARCENE","MAO","MAGALI","MAFALDA","LOGAN","LINN","LANNIE","KAYCE","KAROLINE","KAMILAH","KAMALA","JUSTA","JOLINE","JENNINE","JACQUETTA","IRAIDA","GERALD","GEORGEANNA","FRANCHESCA","FAIRY","EMELINE","ELANE","EHTEL","EARLIE","DULCIE","DALENE","CRIS","CLASSIE","CHERE","CHARIS","CAROYLN","CARMINA","CARITA","BRIAN","BETHANIE","AYAKO","ARICA","AN","ALYSA","ALESSANDRA","AKILAH","ADRIEN","ZETTA","YOULANDA","YELENA","YAHAIRA","XUAN","WENDOLYN","VICTOR","TIJUANA","TERRELL","TERINA","TERESIA","SUZI","SUNDAY","SHERELL","SHAVONDA","SHAUNTE","SHARDA","SHAKITA","SENA","RYANN","RUBI","RIVA","REGINIA","REA","RACHAL","PARTHENIA","PAMULA","MONNIE","MONET","MICHAELE","MELIA","MARINE","MALKA","MAISHA","LISANDRA","LEO","LEKISHA","LEAN","LAURENCE","LAKENDRA","KRYSTIN","KORTNEY","KIZZIE","KITTIE","KERA","KENDAL","KEMBERLY","KANISHA","JULENE","JULE","JOSHUA","JOHANNE","JEFFREY","JAMEE","HAN","HALLEY","GIDGET","GALINA","FREDRICKA","FLETA","FATIMAH","EUSEBIA","ELZA","ELEONORE","DORTHEY","DORIA","DONELLA","DINORAH","DELORSE","CLARETHA","CHRISTINIA","CHARLYN","BONG","BELKIS","AZZIE","ANDERA","AIKO","ADENA","YER","YAJAIRA","WAN","VANIA","ULRIKE","TOSHIA","TIFANY","STEFANY","SHIZUE","SHENIKA","SHAWANNA","SHAROLYN","SHARILYN","SHAQUANA","SHANTAY","SEE","ROZANNE","ROSELEE","RICKIE","REMONA","REANNA","RAELENE","QUINN","PHUNG","PETRONILA","NATACHA","NANCEY","MYRL","MIYOKO","MIESHA","MERIDETH","MARVELLA","MARQUITTA","MARHTA","MARCHELLE","LIZETH","LIBBIE","LAHOMA","LADAWN","KINA","KATHELEEN","KATHARYN","KARISA","KALEIGH","JUNIE","JULIEANN","JOHNSIE","JANEAN","JAIMEE","JACKQUELINE","HISAKO","HERMA","HELAINE","GWYNETH","GLENN","GITA","EUSTOLIA","EMELINA","ELIN","EDRIS","DONNETTE","DONNETTA","DIERDRE","DENAE","DARCEL","CLAUDE","CLARISA","CINDERELLA","CHIA","CHARLESETTA","CHARITA","CELSA","CASSY","CASSI","CARLEE","BRUNA","BRITTANEY","BRANDE","BILLI","BAO","ANTONETTA","ANGLA","ANGELYN","ANALISA","ALANE","WENONA","WENDIE","VERONIQUE","VANNESA","TOBIE","TEMPIE","SUMIKO","SULEMA","SPARKLE","SOMER","SHEBA","SHAYNE","SHARICE","SHANEL","SHALON","SAGE","ROY","ROSIO","ROSELIA","RENAY","REMA","REENA","PORSCHE","PING","PEG","OZIE","ORETHA","ORALEE","ODA","NU","NGAN","NAKESHA","MILLY","MARYBELLE","MARLIN","MARIS","MARGRETT","MARAGARET","MANIE","LURLENE","LILLIA","LIESELOTTE","LAVELLE","LASHAUNDA","LAKEESHA","KEITH","KAYCEE","KALYN","JOYA","JOETTE","JENAE","JANIECE","ILLA","GRISEL","GLAYDS","GENEVIE","GALA","FREDDA","FRED","ELMER","ELEONOR","DEBERA","DEANDREA","DAN","CORRINNE","CORDIA","CONTESSA","COLENE","CLEOTILDE","CHARLOTT","CHANTAY","CECILLE","BEATRIS","AZALEE","ARLEAN","ARDATH","ANJELICA","ANJA","ALFREDIA","ALEISHA","ADAM","ZADA","YUONNE","XIAO","WILLODEAN","WHITLEY","VENNIE","VANNA","TYISHA","TOVA","TORIE","TONISHA","TILDA","TIEN","TEMPLE","SIRENA","SHERRIL","SHANTI","SHAN","SENAIDA","SAMELLA","ROBBYN","RENDA","REITA","PHEBE","PAULITA","NOBUKO","NGUYET","NEOMI","MOON","MIKAELA","MELANIA","MAXIMINA","MARG","MAISIE","LYNNA","LILLI","LAYNE","LASHAUN","LAKENYA","LAEL","KIRSTIE","KATHLINE","KASHA","KARLYN","KARIMA","JOVAN","JOSEFINE","JENNELL","JACQUI","JACKELYN","HYO","HIEN","GRAZYNA","FLORRIE","FLORIA","ELEONORA","DWANA","DORLA","DONG","DELMY","DEJA","DEDE","DANN","CRYSTA","CLELIA","CLARIS","CLARENCE","CHIEKO","CHERLYN","CHERELLE","CHARMAIN","CHARA","CAMMY","BEE","ARNETTE","ARDELLE","ANNIKA","AMIEE","AMEE","ALLENA","YVONE","YUKI","YOSHIE","YEVETTE","YAEL","WILLETTA","VONCILE","VENETTA","TULA","TONETTE","TIMIKA","TEMIKA","TELMA","TEISHA","TAREN","TA","STACEE","SHIN","SHAWNTA","SATURNINA","RICARDA","POK","PASTY","ONIE","NUBIA","MORA","MIKE","MARIELLE","MARIELLA","MARIANELA","MARDELL","MANY","LUANNA","LOISE","LISABETH","LINDSY","LILLIANA","LILLIAM","LELAH","LEIGHA","LEANORA","LANG","KRISTEEN","KHALILAH","KEELEY","KANDRA","JUNKO","JOAQUINA","JERLENE","JANI","JAMIKA","JAME","HSIU","HERMILA","GOLDEN","GENEVIVE","EVIA","EUGENA","EMMALINE","ELFREDA","ELENE","DONETTE","DELCIE","DEEANNA","DARCEY","CUC","CLARINDA","CIRA","CHAE","CELINDA","CATHERYN","CATHERIN","CASIMIRA","CARMELIA","CAMELLIA","BREANA","BOBETTE","BERNARDINA","BEBE","BASILIA","ARLYNE","AMAL","ALAYNA","ZONIA","ZENIA","YURIKO","YAEKO","WYNELL","WILLOW","WILLENA","VERNIA","TU","TRAVIS","TORA","TERRILYN","TERICA","TENESHA","TAWNA","TAJUANA","TAINA","STEPHNIE","SONA","SOL","SINA","SHONDRA","SHIZUKO","SHERLENE","SHERICE","SHARIKA","ROSSIE","ROSENA","RORY","RIMA","RIA","RHEBA","RENNA","PETER","NATALYA","NANCEE","MELODI","MEDA","MAXIMA","MATHA","MARKETTA","MARICRUZ","MARCELENE","MALVINA","LUBA","LOUETTA","LEIDA","LECIA","LAURAN","LASHAWNA","LAINE","KHADIJAH","KATERINE","KASI","KALLIE","JULIETTA","JESUSITA","JESTINE","JESSIA","JEREMY","JEFFIE","JANYCE","ISADORA","GEORGIANNE","FIDELIA","EVITA","EURA","EULAH","ESTEFANA","ELSY","ELIZABET","ELADIA","DODIE","DION","DIA","DENISSE","DELORAS","DELILA","DAYSI","DAKOTA","CURTIS","CRYSTLE","CONCHA","COLBY","CLARETTA","CHU","CHRISTIA","CHARLSIE","CHARLENA","CARYLON","BETTYANN","ASLEY","ASHLEA","AMIRA","AI","AGUEDA","AGNUS","YUETTE","VINITA","VICTORINA","TYNISHA","TREENA","TOCCARA","TISH","THOMASENA","TEGAN","SOILA","SHILOH","SHENNA","SHARMAINE","SHANTAE","SHANDI","SEPTEMBER","SARAN","SARAI","SANA","SAMUEL","SALLEY","ROSETTE","ROLANDE","REGINE","OTELIA","OSCAR","OLEVIA","NICHOLLE","NECOLE","NAIDA","MYRTA","MYESHA","MITSUE","MINTA","MERTIE","MARGY","MAHALIA","MADALENE","LOVE","LOURA","LOREAN","LEWIS","LESHA","LEONIDA","LENITA","LAVONE","LASHELL","LASHANDRA","LAMONICA","KIMBRA","KATHERINA","KARRY","KANESHA","JULIO","JONG","JENEVA","JAQUELYN","HWA","GILMA","GHISLAINE","GERTRUDIS","FRANSISCA","FERMINA","ETTIE","ETSUKO","ELLIS","ELLAN","ELIDIA","EDRA","DORETHEA","DOREATHA","DENYSE","DENNY","DEETTA","DAINE","CYRSTAL","CORRIN","CAYLA","CARLITA","CAMILA","BURMA","BULA","BUENA","BLAKE","BARABARA","AVRIL","AUSTIN","ALAINE","ZANA","WILHEMINA","WANETTA","VIRGIL","VI","VERONIKA","VERNON","VERLINE","VASILIKI","TONITA","TISA","TEOFILA","TAYNA","TAUNYA","TANDRA","TAKAKO","SUNNI","SUANNE","SIXTA","SHARELL","SEEMA","RUSSELL","ROSENDA","ROBENA","RAYMONDE","PEI","PAMILA","OZELL","NEIDA","NEELY","MISTIE","MICHA","MERISSA","MAURITA","MARYLN","MARYETTA","MARSHALL","MARCELL","MALENA","MAKEDA","MADDIE","LOVETTA","LOURIE","LORRINE","LORILEE","LESTER","LAURENA","LASHAY","LARRAINE","LAREE","LACRESHA","KRISTLE","KRISHNA","KEVA","KEIRA","KAROLE","JOIE","JINNY","JEANNETTA","JAMA","HEIDY","GILBERTE","GEMA","FAVIOLA","EVELYNN","ENDA","ELLI","ELLENA","DIVINA","DAGNY","COLLENE","CODI","CINDIE","CHASSIDY","CHASIDY","CATRICE","CATHERINA","CASSEY","CAROLL","CARLENA","CANDRA","CALISTA","BRYANNA","BRITTENY","BEULA","BARI","AUDRIE","AUDRIA","ARDELIA","ANNELLE","ANGILA","ALONA","ALLYN","DOUGLAS","ROGER","JONATHAN","RALPH","NICHOLAS","BENJAMIN","BRUCE","HARRY","WAYNE","STEVE","HOWARD","ERNEST","PHILLIP","TODD","CRAIG","ALAN","PHILIP","EARL","DANNY","BRYAN","STANLEY","LEONARD","NATHAN","MANUEL","RODNEY","MARVIN","VINCENT","JEFFERY","JEFF","CHAD","JACOB","ALFRED","BRADLEY","HERBERT","FREDERICK","EDWIN","DON","RICKY","RANDALL","BARRY","BERNARD","LEROY","MARCUS","THEODORE","CLIFFORD","MIGUEL","JIM","TOM","CALVIN","BILL","LLOYD","DEREK","WARREN","DARRELL","JEROME","FLOYD","ALVIN","TIM","GORDON","GREG","JORGE","DUSTIN","PEDRO","DERRICK","ZACHARY","HERMAN","GLEN","HECTOR","RICARDO","RICK","BRENT","RAMON","GILBERT","MARC","REGINALD","RUBEN","NATHANIEL","RAFAEL","EDGAR","MILTON","RAUL","BEN","CHESTER","DUANE","FRANKLIN","BRAD","RON","ROLAND","ARNOLD","HARVEY","JARED","ERIK","DARRYL","NEIL","JAVIER","FERNANDO","CLINTON","TED","MATHEW","TYRONE","DARREN","LANCE","KURT","ALLAN","NELSON","GUY","CLAYTON","HUGH","MAX","DWAYNE","DWIGHT","ARMANDO","FELIX","EVERETT","IAN","WALLACE","KEN","BOB","ALFREDO","ALBERTO","DAVE","IVAN","BYRON","ISAAC","MORRIS","CLIFTON","WILLARD","ROSS","ANDY","SALVADOR","KIRK","SERGIO","SETH","KENT","TERRANCE","EDUARDO","TERRENCE","ENRIQUE","WADE","STUART","FREDRICK","ARTURO","ALEJANDRO","NICK","LUTHER","WENDELL","JEREMIAH","JULIUS","OTIS","TREVOR","OLIVER",
			//	"LUKE","HOMER","GERARD","DOUG","KENNY","HUBERT","LYLE","MATT","ALFONSO","ORLANDO","REX","CARLTON","ERNESTO","NEAL","PABLO","LORENZO","OMAR","WILBUR","GRANT","HORACE","RODERICK","ABRAHAM","WILLIS","RICKEY","ANDRES","CESAR","JOHNATHAN","MALCOLM","RUDOLPH","DAMON","KELVIN","PRESTON","ALTON","ARCHIE","MARCO","WM","PETE","RANDOLPH","GARRY","GEOFFREY","JONATHON","FELIPE","GERARDO","ED","DOMINIC","DELBERT","COLIN","GUILLERMO","EARNEST","LUCAS","BENNY","SPENCER","RODOLFO","MYRON","EDMUND","GARRETT","SALVATORE","CEDRIC","LOWELL","GREGG","SHERMAN","WILSON","SYLVESTER","ROOSEVELT","ISRAEL","JERMAINE","FORREST","WILBERT","LELAND","SIMON","CLARK","IRVING","BRYANT","OWEN","RUFUS","WOODROW","KRISTOPHER","MACK","LEVI","MARCOS","GUSTAVO","JAKE","LIONEL","GILBERTO","CLINT","NICOLAS","ISMAEL","ORVILLE","ERVIN","DEWEY","AL","WILFRED","JOSH","HUGO","IGNACIO","CALEB","TOMAS","SHELDON","ERICK","STEWART","DOYLE","DARREL","ROGELIO","TERENCE","SANTIAGO","ALONZO","ELIAS","BERT","ELBERT","RAMIRO","CONRAD","NOAH","GRADY","PHIL","CORNELIUS","LAMAR","ROLANDO","CLAY","PERCY","DEXTER","BRADFORD","DARIN","AMOS","MOSES","IRVIN","SAUL","ROMAN","RANDAL","TIMMY","DARRIN","WINSTON","BRENDAN","ABEL","DOMINICK","BOYD","EMILIO","ELIJAH","DOMINGO","EMMETT","MARLON","EMANUEL","JERALD","EDMOND","EMIL","DEWAYNE","WILL","OTTO","TEDDY","REYNALDO","BRET","JESS","TRENT","HUMBERTO","EMMANUEL","STEPHAN","VICENTE","LAMONT","GARLAND","MILES","EFRAIN","HEATH","RODGER","HARLEY","ETHAN","ELDON","ROCKY","PIERRE","JUNIOR","FREDDY","ELI","BRYCE","ANTOINE","STERLING","CHASE","GROVER","ELTON","CLEVELAND","DYLAN","CHUCK","DAMIAN","REUBEN","STAN","AUGUST","LEONARDO","JASPER","RUSSEL","ERWIN","BENITO","HANS","MONTE","BLAINE","ERNIE","CURT","QUENTIN","AGUSTIN","MURRAY","JAMAL","ADOLFO","HARRISON","TYSON","BURTON","BRADY","ELLIOTT","WILFREDO","BART","JARROD","VANCE","DENIS","DAMIEN","JOAQUIN","HARLAN","DESMOND","ELLIOT","DARWIN","GREGORIO","BUDDY","XAVIER","KERMIT","ROSCOE","ESTEBAN","ANTON","SOLOMON","SCOTTY","NORBERT","ELVIN","WILLIAMS","NOLAN","ROD","QUINTON","HAL","BRAIN","ROB","ELWOOD","KENDRICK","DARIUS","MOISES","FIDEL","THADDEUS","CLIFF","MARCEL","JACKSON","RAPHAEL","BRYON","ARMAND","ALVARO","JEFFRY","DANE","JOESPH","THURMAN","NED","RUSTY","MONTY","FABIAN","REGGIE","MASON","GRAHAM","ISAIAH","VAUGHN","GUS","LOYD","DIEGO","ADOLPH","NORRIS","MILLARD","ROCCO","GONZALO","DERICK","RODRIGO","WILEY","RIGOBERTO","ALPHONSO","TY","NOE","VERN","REED","JEFFERSON","ELVIS","BERNARDO","MAURICIO","HIRAM","DONOVAN","BASIL","RILEY","NICKOLAS","MAYNARD","SCOT","VINCE","QUINCY","EDDY","SEBASTIAN","FEDERICO","ULYSSES","HERIBERTO","DONNELL","COLE","DAVIS","GAVIN","EMERY","WARD","ROMEO","JAYSON","DANTE","CLEMENT","COY","MAXWELL","JARVIS","BRUNO","ISSAC","DUDLEY","BROCK","SANFORD","CARMELO","BARNEY","NESTOR","STEFAN","DONNY","ART","LINWOOD","BEAU","WELDON","GALEN","ISIDRO","TRUMAN","DELMAR","JOHNATHON","SILAS","FREDERIC","DICK","IRWIN","MERLIN","CHARLEY","MARCELINO","HARRIS","CARLO","TRENTON","KURTIS","HUNTER","AURELIO","WINFRED","VITO","COLLIN","DENVER","CARTER","LEONEL","EMORY","PASQUALE","MOHAMMAD","MARIANO","DANIAL","LANDON","DIRK","BRANDEN","ADAN","BUFORD","GERMAN","WILMER","EMERSON","ZACHERY","FLETCHER","JACQUES","ERROL","DALTON","MONROE","JOSUE","EDWARDO","BOOKER","WILFORD","SONNY","SHELTON","CARSON","THERON","RAYMUNDO","DAREN","HOUSTON","ROBBY","LINCOLN","GENARO","BENNETT","OCTAVIO","CORNELL","HUNG","ARRON","ANTONY","HERSCHEL","GIOVANNI","GARTH","CYRUS","CYRIL","RONNY","LON","FREEMAN","DUNCAN","KENNITH","CARMINE","ERICH","CHADWICK","WILBURN","RUSS","REID","MYLES","ANDERSON","MORTON","JONAS","FOREST","MITCHEL","MERVIN","ZANE","RICH","JAMEL","LAZARO","ALPHONSE","RANDELL","MAJOR","JARRETT","BROOKS","ABDUL","LUCIANO","SEYMOUR","EUGENIO","MOHAMMED","VALENTIN","CHANCE","ARNULFO","LUCIEN","FERDINAND","THAD","EZRA","ALDO","RUBIN","ROYAL","MITCH","EARLE","ABE","WYATT","MARQUIS","LANNY","KAREEM","JAMAR","BORIS","ISIAH","EMILE","ELMO","ARON","LEOPOLDO","EVERETTE","JOSEF","ELOY","RODRICK","REINALDO","LUCIO","JERROD","WESTON","HERSHEL","BARTON","PARKER","LEMUEL","BURT","JULES","GIL","ELISEO","AHMAD","NIGEL","EFREN","ANTWAN","ALDEN","MARGARITO","COLEMAN","DINO","OSVALDO","LES","DEANDRE","NORMAND","KIETH","TREY","NORBERTO","NAPOLEON","JEROLD","FRITZ","ROSENDO","MILFORD","CHRISTOPER","ALFONZO","LYMAN","JOSIAH","BRANT","WILTON","RICO","JAMAAL","DEWITT","BRENTON","OLIN","FOSTER","FAUSTINO","CLAUDIO","JUDSON","GINO","EDGARDO","ALEC","TANNER","JARRED","DONN","TAD","PRINCE","PORFIRIO","ODIS","LENARD","CHAUNCEY","TOD","MEL","MARCELO","KORY","AUGUSTUS","KEVEN","HILARIO","BUD","SAL","ORVAL","MAURO","ZACHARIAH","OLEN","ANIBAL","MILO","JED","DILLON","AMADO","NEWTON","LENNY","RICHIE","HORACIO","BRICE","MOHAMED","DELMER","DARIO","REYES","MAC","JONAH","JERROLD","ROBT","HANK","RUPERT","ROLLAND","KENTON","DAMION","ANTONE","WALDO","FREDRIC","BRADLY","KIP","BURL","WALKER","TYREE","JEFFEREY","AHMED","WILLY","STANFORD","OREN","NOBLE","MOSHE","MIKEL","ENOCH","BRENDON","QUINTIN","JAMISON","FLORENCIO","DARRICK","TOBIAS","HASSAN","GIUSEPPE","DEMARCUS","CLETUS","TYRELL","LYNDON","KEENAN","WERNER","GERALDO","COLUMBUS","CHET","BERTRAM","MARKUS","HUEY","HILTON","DWAIN","DONTE","TYRON","OMER","ISAIAS","HIPOLITO","FERMIN","ADALBERTO","BO","BARRETT","TEODORO","MCKINLEY","MAXIMO","GARFIELD","RALEIGH","LAWERENCE","ABRAM","RASHAD","KING","EMMITT","DARON","SAMUAL","MIQUEL","EUSEBIO","DOMENIC","DARRON","BUSTER","WILBER","RENATO","JC","HOYT","HAYWOOD","EZEKIEL","CHAS","FLORENTINO","ELROY","CLEMENTE","ARDEN","NEVILLE","EDISON","DESHAWN","NATHANIAL","JORDON","DANILO","CLAUD","SHERWOOD","RAYMON","RAYFORD","CRISTOBAL","AMBROSE","TITUS","HYMAN","FELTON","EZEQUIEL","ERASMO","STANTON","LONNY","LEN","IKE","MILAN","LINO","JAROD","HERB","ANDREAS","WALTON","RHETT","PALMER","DOUGLASS","CORDELL","OSWALDO","ELLSWORTH","VIRGILIO","TONEY","NATHANAEL","DEL","BENEDICT","MOSE","JOHNSON","ISREAL","GARRET","FAUSTO","ASA","ARLEN","ZACK","WARNER","MODESTO","FRANCESCO","MANUAL","GAYLORD","GASTON","FILIBERTO","DEANGELO","MICHALE","GRANVILLE","WES","MALIK","ZACKARY","TUAN","ELDRIDGE","CRISTOPHER","CORTEZ","ANTIONE","MALCOM","LONG","KOREY","JOSPEH","COLTON","WAYLON","VON","HOSEA","SHAD","SANTO","RUDOLF","ROLF","REY","RENALDO","MARCELLUS","LUCIUS","KRISTOFER","BOYCE","BENTON","HAYDEN","HARLAND","ARNOLDO","RUEBEN","LEANDRO","KRAIG","JERRELL","JEROMY","HOBERT","CEDRICK","ARLIE","WINFORD","WALLY","LUIGI","KENETH","JACINTO","GRAIG","FRANKLYN","EDMUNDO","SID","PORTER","LEIF","JERAMY","BUCK","WILLIAN","VINCENZO","SHON","LYNWOOD","JERE","HAI","ELDEN","DORSEY","DARELL","BRODERICK","ALONSO"); // 22
			//long answer = SumNumbersNotSumOfTwoAbundant(true); // 23
			//string answer = FindNthLexicographicPermutation("0123456789", 1000000); // 24
			//int answer = IndexOfFirstFibonacciTermWithLength(1000); // 25
			//int answer = FindReciprocalWithLongestRecurringCycle(1000); // 26
			//PrintPrimes(10000);
			//int answer = FindQuadraticEquationProducingMostSequentialPrimes(1000); // 27
			//long answer = SumCountingSquareSpiralDiagonals(1001); // 28
			//int answer = CountDistinctExponentialTerms(100); // 29
			//int answer = SumAllNumbersEqualToSumOfNthPowersOfDigits(5); // 30
			//int answer = CountWaysToMakeTotalFromPenceCoins(200); // 31
			//int answer = FindPandigitalProductsOneThroughNine(); // 32
			//int answer = FindDigitCancellingFractions(); // 33
			//int answer = FindDigitFactorials(); // 34
			//int answer = FindCircularPrimes(1000000); // 35
			//int answer = FindDoubleBasePalindromes(); // 36
			//long answer = SumTruncatablePrimes(); // 37
			//int answer = LargestPandigitalMultiple(); // 38
			//int answer = SolveIntegerRightTriangles(1000); // 39
			//int answer = ProductOfPowersOfTenDigitsOfChampernownesConstant(1000000); // 40
			//int answer = LargestPandigitalPrime("987654321"); // 41
			//int answer = CountTriangleWords("A","ABILITY","ABLE","ABOUT","ABOVE","ABSENCE","ABSOLUTELY","ACADEMIC","ACCEPT","ACCESS","ACCIDENT","ACCOMPANY","ACCORDING","ACCOUNT","ACHIEVE","ACHIEVEMENT","ACID","ACQUIRE","ACROSS","ACT","ACTION","ACTIVE","ACTIVITY","ACTUAL","ACTUALLY","ADD","ADDITION","ADDITIONAL","ADDRESS","ADMINISTRATION","ADMIT","ADOPT","ADULT","ADVANCE","ADVANTAGE","ADVICE","ADVISE","AFFAIR","AFFECT","AFFORD","AFRAID","AFTER","AFTERNOON","AFTERWARDS","AGAIN","AGAINST","AGE","AGENCY","AGENT","AGO","AGREE","AGREEMENT","AHEAD","AID","AIM","AIR","AIRCRAFT","ALL","ALLOW","ALMOST","ALONE","ALONG","ALREADY","ALRIGHT","ALSO","ALTERNATIVE","ALTHOUGH","ALWAYS","AMONG","AMONGST","AMOUNT","AN","ANALYSIS","ANCIENT","AND","ANIMAL","ANNOUNCE","ANNUAL","ANOTHER","ANSWER","ANY","ANYBODY","ANYONE","ANYTHING","ANYWAY","APART","APPARENT","APPARENTLY","APPEAL","APPEAR","APPEARANCE","APPLICATION","APPLY","APPOINT","APPOINTMENT","APPROACH","APPROPRIATE","APPROVE","AREA","ARGUE","ARGUMENT","ARISE","ARM","ARMY","AROUND","ARRANGE","ARRANGEMENT","ARRIVE","ART","ARTICLE","ARTIST","AS","ASK","ASPECT","ASSEMBLY","ASSESS","ASSESSMENT","ASSET","ASSOCIATE","ASSOCIATION","ASSUME","ASSUMPTION","AT","ATMOSPHERE","ATTACH","ATTACK","ATTEMPT","ATTEND","ATTENTION","ATTITUDE","ATTRACT","ATTRACTIVE","AUDIENCE","AUTHOR","AUTHORITY","AVAILABLE","AVERAGE","AVOID","AWARD","AWARE","AWAY","AYE","BABY","BACK","BACKGROUND","BAD","BAG","BALANCE","BALL","BAND","BANK","BAR","BASE","BASIC","BASIS","BATTLE","BE","BEAR","BEAT","BEAUTIFUL","BECAUSE","BECOME","BED","BEDROOM","BEFORE","BEGIN","BEGINNING","BEHAVIOUR","BEHIND","BELIEF","BELIEVE","BELONG","BELOW","BENEATH","BENEFIT","BESIDE","BEST","BETTER","BETWEEN","BEYOND","BIG","BILL","BIND","BIRD","BIRTH","BIT","BLACK","BLOCK","BLOOD","BLOODY","BLOW","BLUE","BOARD","BOAT","BODY","BONE","BOOK","BORDER","BOTH","BOTTLE","BOTTOM","BOX","BOY","BRAIN","BRANCH","BREAK","BREATH","BRIDGE","BRIEF","BRIGHT","BRING","BROAD","BROTHER","BUDGET","BUILD","BUILDING","BURN","BUS","BUSINESS","BUSY","BUT","BUY","BY","CABINET","CALL","CAMPAIGN","CAN","CANDIDATE","CAPABLE","CAPACITY","CAPITAL","CAR","CARD","CARE","CAREER","CAREFUL","CAREFULLY","CARRY","CASE","CASH","CAT","CATCH","CATEGORY","CAUSE","CELL","CENTRAL","CENTRE","CENTURY","CERTAIN","CERTAINLY","CHAIN","CHAIR","CHAIRMAN","CHALLENGE","CHANCE","CHANGE","CHANNEL","CHAPTER","CHARACTER","CHARACTERISTIC","CHARGE","CHEAP","CHECK","CHEMICAL","CHIEF","CHILD","CHOICE","CHOOSE","CHURCH","CIRCLE","CIRCUMSTANCE","CITIZEN","CITY","CIVIL","CLAIM","CLASS","CLEAN","CLEAR","CLEARLY","CLIENT","CLIMB","CLOSE","CLOSELY","CLOTHES","CLUB","COAL","CODE","COFFEE","COLD","COLLEAGUE","COLLECT","COLLECTION","COLLEGE","COLOUR","COMBINATION","COMBINE","COME","COMMENT","COMMERCIAL","COMMISSION","COMMIT","COMMITMENT","COMMITTEE","COMMON","COMMUNICATION","COMMUNITY","COMPANY","COMPARE","COMPARISON","COMPETITION","COMPLETE","COMPLETELY","COMPLEX","COMPONENT","COMPUTER","CONCENTRATE","CONCENTRATION","CONCEPT","CONCERN","CONCERNED","CONCLUDE","CONCLUSION","CONDITION","CONDUCT","CONFERENCE","CONFIDENCE","CONFIRM","CONFLICT","CONGRESS","CONNECT","CONNECTION","CONSEQUENCE","CONSERVATIVE","CONSIDER","CONSIDERABLE","CONSIDERATION","CONSIST","CONSTANT","CONSTRUCTION","CONSUMER","CONTACT","CONTAIN","CONTENT","CONTEXT","CONTINUE","CONTRACT","CONTRAST","CONTRIBUTE","CONTRIBUTION","CONTROL","CONVENTION","CONVERSATION","COPY","CORNER","CORPORATE","CORRECT","COS","COST","COULD","COUNCIL","COUNT","COUNTRY","COUNTY","COUPLE","COURSE","COURT","COVER","CREATE","CREATION","CREDIT","CRIME","CRIMINAL","CRISIS","CRITERION","CRITICAL","CRITICISM","CROSS","CROWD","CRY","CULTURAL","CULTURE","CUP","CURRENT","CURRENTLY","CURRICULUM","CUSTOMER","CUT","DAMAGE","DANGER","DANGEROUS","DARK","DATA","DATE","DAUGHTER","DAY","DEAD","DEAL","DEATH","DEBATE","DEBT","DECADE","DECIDE","DECISION","DECLARE","DEEP","DEFENCE","DEFENDANT","DEFINE","DEFINITION","DEGREE","DELIVER","DEMAND","DEMOCRATIC","DEMONSTRATE","DENY","DEPARTMENT","DEPEND","DEPUTY","DERIVE","DESCRIBE","DESCRIPTION","DESIGN","DESIRE","DESK","DESPITE","DESTROY","DETAIL","DETAILED","DETERMINE","DEVELOP","DEVELOPMENT","DEVICE","DIE","DIFFERENCE","DIFFERENT","DIFFICULT","DIFFICULTY","DINNER","DIRECT","DIRECTION","DIRECTLY","DIRECTOR","DISAPPEAR","DISCIPLINE","DISCOVER","DISCUSS","DISCUSSION","DISEASE","DISPLAY","DISTANCE","DISTINCTION","DISTRIBUTION","DISTRICT","DIVIDE","DIVISION","DO","DOCTOR","DOCUMENT","DOG","DOMESTIC","DOOR","DOUBLE","DOUBT","DOWN","DRAW","DRAWING","DREAM","DRESS","DRINK","DRIVE","DRIVER","DROP","DRUG","DRY","DUE","DURING","DUTY","EACH","EAR","EARLY","EARN","EARTH","EASILY","EAST","EASY","EAT","ECONOMIC","ECONOMY","EDGE","EDITOR","EDUCATION","EDUCATIONAL","EFFECT","EFFECTIVE","EFFECTIVELY","EFFORT","EGG","EITHER","ELDERLY","ELECTION","ELEMENT","ELSE","ELSEWHERE","EMERGE","EMPHASIS","EMPLOY","EMPLOYEE","EMPLOYER","EMPLOYMENT","EMPTY","ENABLE","ENCOURAGE","END","ENEMY","ENERGY","ENGINE","ENGINEERING","ENJOY","ENOUGH","ENSURE","ENTER","ENTERPRISE","ENTIRE","ENTIRELY","ENTITLE","ENTRY","ENVIRONMENT","ENVIRONMENTAL","EQUAL","EQUALLY","EQUIPMENT","ERROR","ESCAPE","ESPECIALLY","ESSENTIAL","ESTABLISH","ESTABLISHMENT","ESTATE","ESTIMATE","EVEN","EVENING","EVENT","EVENTUALLY","EVER","EVERY","EVERYBODY","EVERYONE","EVERYTHING","EVIDENCE","EXACTLY","EXAMINATION","EXAMINE","EXAMPLE","EXCELLENT","EXCEPT","EXCHANGE","EXECUTIVE","EXERCISE","EXHIBITION","EXIST","EXISTENCE","EXISTING","EXPECT","EXPECTATION","EXPENDITURE","EXPENSE","EXPENSIVE","EXPERIENCE","EXPERIMENT","EXPERT","EXPLAIN","EXPLANATION","EXPLORE","EXPRESS","EXPRESSION","EXTEND","EXTENT","EXTERNAL","EXTRA","EXTREMELY","EYE","FACE","FACILITY","FACT","FACTOR","FACTORY","FAIL","FAILURE","FAIR","FAIRLY","FAITH","FALL","FAMILIAR","FAMILY","FAMOUS","FAR","FARM","FARMER","FASHION","FAST","FATHER","FAVOUR","FEAR","FEATURE","FEE","FEEL","FEELING","FEMALE","FEW","FIELD","FIGHT","FIGURE","FILE","FILL","FILM","FINAL","FINALLY","FINANCE","FINANCIAL","FIND","FINDING","FINE","FINGER","FINISH","FIRE","FIRM","FIRST","FISH","FIT","FIX","FLAT","FLIGHT","FLOOR","FLOW","FLOWER","FLY","FOCUS","FOLLOW","FOLLOWING","FOOD","FOOT","FOOTBALL","FOR","FORCE","FOREIGN","FOREST","FORGET","FORM","FORMAL","FORMER","FORWARD","FOUNDATION","FREE","FREEDOM","FREQUENTLY","FRESH","FRIEND","FROM","FRONT","FRUIT","FUEL","FULL","FULLY","FUNCTION","FUND","FUNNY","FURTHER","FUTURE","GAIN","GAME","GARDEN","GAS","GATE","GATHER","GENERAL","GENERALLY","GENERATE","GENERATION","GENTLEMAN","GET","GIRL","GIVE","GLASS","GO","GOAL","GOD","GOLD","GOOD","GOVERNMENT","GRANT","GREAT","GREEN","GREY","GROUND","GROUP","GROW","GROWING","GROWTH","GUEST","GUIDE","GUN","HAIR","HALF","HALL","HAND","HANDLE","HANG","HAPPEN","HAPPY","HARD","HARDLY","HATE","HAVE","HE","HEAD","HEALTH","HEAR","HEART","HEAT","HEAVY","HELL","HELP","HENCE","HER","HERE","HERSELF","HIDE","HIGH","HIGHLY","HILL","HIM","HIMSELF","HIS","HISTORICAL","HISTORY","HIT","HOLD","HOLE","HOLIDAY","HOME","HOPE","HORSE","HOSPITAL","HOT","HOTEL","HOUR","HOUSE","HOUSEHOLD","HOUSING","HOW","HOWEVER","HUGE","HUMAN","HURT","HUSBAND","I","IDEA","IDENTIFY","IF","IGNORE","ILLUSTRATE","IMAGE","IMAGINE","IMMEDIATE","IMMEDIATELY","IMPACT","IMPLICATION","IMPLY","IMPORTANCE","IMPORTANT","IMPOSE","IMPOSSIBLE","IMPRESSION","IMPROVE","IMPROVEMENT","IN","INCIDENT","INCLUDE","INCLUDING","INCOME","INCREASE","INCREASED","INCREASINGLY","INDEED","INDEPENDENT","INDEX","INDICATE","INDIVIDUAL","INDUSTRIAL","INDUSTRY","INFLUENCE","INFORM","INFORMATION","INITIAL","INITIATIVE","INJURY","INSIDE","INSIST","INSTANCE","INSTEAD","INSTITUTE","INSTITUTION","INSTRUCTION","INSTRUMENT","INSURANCE","INTEND","INTENTION","INTEREST","INTERESTED","INTERESTING","INTERNAL","INTERNATIONAL","INTERPRETATION","INTERVIEW","INTO","INTRODUCE","INTRODUCTION","INVESTIGATE","INVESTIGATION","INVESTMENT","INVITE","INVOLVE","IRON","IS","ISLAND","ISSUE","IT","ITEM","ITS","ITSELF","JOB","JOIN","JOINT","JOURNEY","JUDGE","JUMP","JUST","JUSTICE","KEEP","KEY","KID","KILL","KIND","KING","KITCHEN","KNEE","KNOW","KNOWLEDGE","LABOUR","LACK","LADY","LAND","LANGUAGE","LARGE","LARGELY","LAST","LATE","LATER","LATTER","LAUGH","LAUNCH","LAW","LAWYER","LAY","LEAD","LEADER","LEADERSHIP","LEADING","LEAF","LEAGUE","LEAN","LEARN","LEAST","LEAVE","LEFT","LEG","LEGAL","LEGISLATION","LENGTH","LESS","LET","LETTER","LEVEL","LIABILITY","LIBERAL","LIBRARY","LIE","LIFE","LIFT","LIGHT","LIKE","LIKELY","LIMIT","LIMITED","LINE","LINK","LIP","LIST","LISTEN","LITERATURE","LITTLE","LIVE","LIVING","LOAN","LOCAL","LOCATION","LONG","LOOK","LORD","LOSE","LOSS","LOT","LOVE","LOVELY","LOW","LUNCH","MACHINE","MAGAZINE","MAIN","MAINLY","MAINTAIN","MAJOR","MAJORITY","MAKE","MALE","MAN","MANAGE","MANAGEMENT","MANAGER","MANNER","MANY","MAP","MARK","MARKET","MARRIAGE","MARRIED","MARRY","MASS","MASTER","MATCH","MATERIAL","MATTER","MAY","MAYBE","ME","MEAL","MEAN","MEANING","MEANS","MEANWHILE","MEASURE","MECHANISM","MEDIA","MEDICAL","MEET","MEETING","MEMBER","MEMBERSHIP","MEMORY","MENTAL","MENTION","MERELY","MESSAGE","METAL","METHOD","MIDDLE","MIGHT","MILE","MILITARY","MILK","MIND","MINE","MINISTER","MINISTRY","MINUTE","MISS","MISTAKE","MODEL","MODERN","MODULE","MOMENT","MONEY","MONTH","MORE","MORNING","MOST","MOTHER","MOTION","MOTOR","MOUNTAIN","MOUTH","MOVE","MOVEMENT","MUCH","MURDER","MUSEUM","MUSIC","MUST","MY","MYSELF","NAME","NARROW","NATION","NATIONAL","NATURAL","NATURE","NEAR","NEARLY","NECESSARILY","NECESSARY","NECK","NEED","NEGOTIATION","NEIGHBOUR","NEITHER","NETWORK","NEVER","NEVERTHELESS","NEW","NEWS","NEWSPAPER","NEXT","NICE","NIGHT","NO","NOBODY","NOD","NOISE","NONE","NOR","NORMAL","NORMALLY","NORTH","NORTHERN","NOSE","NOT","NOTE","NOTHING","NOTICE","NOTION","NOW","NUCLEAR","NUMBER","NURSE","OBJECT","OBJECTIVE","OBSERVATION","OBSERVE","OBTAIN","OBVIOUS","OBVIOUSLY","OCCASION","OCCUR","ODD","OF","OFF","OFFENCE","OFFER","OFFICE","OFFICER","OFFICIAL","OFTEN","OIL","OKAY","OLD","ON","ONCE","ONE","ONLY","ONTO","OPEN","OPERATE","OPERATION","OPINION","OPPORTUNITY","OPPOSITION","OPTION","OR","ORDER","ORDINARY",
			//	"ORGANISATION","ORGANISE","ORGANIZATION","ORIGIN","ORIGINAL","OTHER","OTHERWISE","OUGHT","OUR","OURSELVES","OUT","OUTCOME","OUTPUT","OUTSIDE","OVER","OVERALL","OWN","OWNER","PACKAGE","PAGE","PAIN","PAINT","PAINTING","PAIR","PANEL","PAPER","PARENT","PARK","PARLIAMENT","PART","PARTICULAR","PARTICULARLY","PARTLY","PARTNER","PARTY","PASS","PASSAGE","PAST","PATH","PATIENT","PATTERN","PAY","PAYMENT","PEACE","PENSION","PEOPLE","PER","PERCENT","PERFECT","PERFORM","PERFORMANCE","PERHAPS","PERIOD","PERMANENT","PERSON","PERSONAL","PERSUADE","PHASE","PHONE","PHOTOGRAPH","PHYSICAL","PICK","PICTURE","PIECE","PLACE","PLAN","PLANNING","PLANT","PLASTIC","PLATE","PLAY","PLAYER","PLEASE","PLEASURE","PLENTY","PLUS","POCKET","POINT","POLICE","POLICY","POLITICAL","POLITICS","POOL","POOR","POPULAR","POPULATION","POSITION","POSITIVE","POSSIBILITY","POSSIBLE","POSSIBLY","POST","POTENTIAL","POUND","POWER","POWERFUL","PRACTICAL","PRACTICE","PREFER","PREPARE","PRESENCE","PRESENT","PRESIDENT","PRESS","PRESSURE","PRETTY","PREVENT","PREVIOUS","PREVIOUSLY","PRICE","PRIMARY","PRIME","PRINCIPLE","PRIORITY","PRISON","PRISONER","PRIVATE","PROBABLY","PROBLEM","PROCEDURE","PROCESS","PRODUCE","PRODUCT","PRODUCTION","PROFESSIONAL","PROFIT","PROGRAM","PROGRAMME","PROGRESS","PROJECT","PROMISE","PROMOTE","PROPER","PROPERLY","PROPERTY","PROPORTION","PROPOSE","PROPOSAL","PROSPECT","PROTECT","PROTECTION","PROVE","PROVIDE","PROVIDED","PROVISION","PUB","PUBLIC","PUBLICATION","PUBLISH","PULL","PUPIL","PURPOSE","PUSH","PUT","QUALITY","QUARTER","QUESTION","QUICK","QUICKLY","QUIET","QUITE","RACE","RADIO","RAILWAY","RAIN","RAISE","RANGE","RAPIDLY","RARE","RATE","RATHER","REACH","REACTION","READ","READER","READING","READY","REAL","REALISE","REALITY","REALIZE","REALLY","REASON","REASONABLE","RECALL","RECEIVE","RECENT","RECENTLY","RECOGNISE","RECOGNITION","RECOGNIZE","RECOMMEND","RECORD","RECOVER","RED","REDUCE","REDUCTION","REFER","REFERENCE","REFLECT","REFORM","REFUSE","REGARD","REGION","REGIONAL","REGULAR","REGULATION","REJECT","RELATE","RELATION","RELATIONSHIP","RELATIVE","RELATIVELY","RELEASE","RELEVANT","RELIEF","RELIGION","RELIGIOUS","RELY","REMAIN","REMEMBER","REMIND","REMOVE","REPEAT","REPLACE","REPLY","REPORT","REPRESENT","REPRESENTATION","REPRESENTATIVE","REQUEST","REQUIRE","REQUIREMENT","RESEARCH","RESOURCE","RESPECT","RESPOND","RESPONSE","RESPONSIBILITY","RESPONSIBLE","REST","RESTAURANT","RESULT","RETAIN","RETURN","REVEAL","REVENUE","REVIEW","REVOLUTION","RICH","RIDE","RIGHT","RING","RISE","RISK","RIVER","ROAD","ROCK","ROLE","ROLL","ROOF","ROOM","ROUND","ROUTE","ROW","ROYAL","RULE","RUN","RURAL","SAFE","SAFETY","SALE","SAME","SAMPLE","SATISFY","SAVE","SAY","SCALE","SCENE","SCHEME","SCHOOL","SCIENCE","SCIENTIFIC","SCIENTIST","SCORE","SCREEN","SEA","SEARCH","SEASON","SEAT","SECOND","SECONDARY","SECRETARY","SECTION","SECTOR","SECURE","SECURITY","SEE","SEEK","SEEM","SELECT","SELECTION","SELL","SEND","SENIOR","SENSE","SENTENCE","SEPARATE","SEQUENCE","SERIES","SERIOUS","SERIOUSLY","SERVANT","SERVE","SERVICE","SESSION","SET","SETTLE","SETTLEMENT","SEVERAL","SEVERE","SEX","SEXUAL","SHAKE","SHALL","SHAPE","SHARE","SHE","SHEET","SHIP","SHOE","SHOOT","SHOP","SHORT","SHOT","SHOULD","SHOULDER","SHOUT","SHOW","SHUT","SIDE","SIGHT","SIGN","SIGNAL","SIGNIFICANCE","SIGNIFICANT","SILENCE","SIMILAR","SIMPLE","SIMPLY","SINCE","SING","SINGLE","SIR","SISTER","SIT","SITE","SITUATION","SIZE","SKILL","SKIN","SKY","SLEEP","SLIGHTLY","SLIP","SLOW","SLOWLY","SMALL","SMILE","SO","SOCIAL","SOCIETY","SOFT","SOFTWARE","SOIL","SOLDIER","SOLICITOR","SOLUTION","SOME","SOMEBODY","SOMEONE","SOMETHING","SOMETIMES","SOMEWHAT","SOMEWHERE","SON","SONG","SOON","SORRY","SORT","SOUND","SOURCE","SOUTH","SOUTHERN","SPACE","SPEAK","SPEAKER","SPECIAL","SPECIES","SPECIFIC","SPEECH","SPEED","SPEND","SPIRIT","SPORT","SPOT","SPREAD","SPRING","STAFF","STAGE","STAND","STANDARD","STAR","START","STATE","STATEMENT","STATION","STATUS","STAY","STEAL","STEP","STICK","STILL","STOCK","STONE","STOP","STORE","STORY","STRAIGHT","STRANGE","STRATEGY","STREET","STRENGTH","STRIKE","STRONG","STRONGLY","STRUCTURE","STUDENT","STUDIO","STUDY","STUFF","STYLE","SUBJECT","SUBSTANTIAL","SUCCEED","SUCCESS","SUCCESSFUL","SUCH","SUDDENLY","SUFFER","SUFFICIENT","SUGGEST","SUGGESTION","SUITABLE","SUM","SUMMER","SUN","SUPPLY","SUPPORT","SUPPOSE","SURE","SURELY","SURFACE","SURPRISE","SURROUND","SURVEY","SURVIVE","SWITCH","SYSTEM","TABLE","TAKE","TALK","TALL","TAPE","TARGET","TASK","TAX","TEA","TEACH","TEACHER","TEACHING","TEAM","TEAR","TECHNICAL","TECHNIQUE","TECHNOLOGY","TELEPHONE","TELEVISION","TELL","TEMPERATURE","TEND","TERM","TERMS","TERRIBLE","TEST","TEXT","THAN","THANK","THANKS","THAT","THE","THEATRE","THEIR","THEM","THEME","THEMSELVES","THEN","THEORY","THERE","THEREFORE","THESE","THEY","THIN","THING","THINK","THIS","THOSE","THOUGH","THOUGHT","THREAT","THREATEN","THROUGH","THROUGHOUT","THROW","THUS","TICKET","TIME","TINY","TITLE","TO","TODAY","TOGETHER","TOMORROW","TONE","TONIGHT","TOO","TOOL","TOOTH","TOP","TOTAL","TOTALLY","TOUCH","TOUR","TOWARDS","TOWN","TRACK","TRADE","TRADITION","TRADITIONAL","TRAFFIC","TRAIN","TRAINING","TRANSFER","TRANSPORT","TRAVEL","TREAT","TREATMENT","TREATY","TREE","TREND","TRIAL","TRIP","TROOP","TROUBLE","TRUE","TRUST","TRUTH","TRY","TURN","TWICE","TYPE","TYPICAL","UNABLE","UNDER","UNDERSTAND","UNDERSTANDING","UNDERTAKE","UNEMPLOYMENT","UNFORTUNATELY","UNION","UNIT","UNITED","UNIVERSITY","UNLESS","UNLIKELY","UNTIL","UP","UPON","UPPER","URBAN","US","USE","USED","USEFUL","USER","USUAL","USUALLY","VALUE","VARIATION","VARIETY","VARIOUS","VARY","VAST","VEHICLE","VERSION","VERY","VIA","VICTIM","VICTORY","VIDEO","VIEW","VILLAGE","VIOLENCE","VISION","VISIT","VISITOR","VITAL","VOICE","VOLUME","VOTE","WAGE","WAIT","WALK","WALL","WANT","WAR","WARM","WARN","WASH","WATCH","WATER","WAVE","WAY","WE","WEAK","WEAPON","WEAR","WEATHER","WEEK","WEEKEND","WEIGHT","WELCOME","WELFARE","WELL","WEST","WESTERN","WHAT","WHATEVER","WHEN","WHERE","WHEREAS","WHETHER","WHICH","WHILE","WHILST","WHITE","WHO","WHOLE","WHOM","WHOSE","WHY","WIDE","WIDELY","WIFE","WILD","WILL","WIN","WIND","WINDOW","WINE","WING","WINNER","WINTER","WISH","WITH","WITHDRAW","WITHIN","WITHOUT","WOMAN","WONDER","WONDERFUL","WOOD","WORD","WORK","WORKER","WORKING","WORKS","WORLD","WORRY","WORTH","WOULD","WRITE","WRITER","WRITING","WRONG","YARD","YEAH","YEAR","YES","YESTERDAY","YET","YOU","YOUNG","YOUR","YOURSELF","YOUTH");
			//long answer = SumPandigitalsSubStringDivisibleByConsecutivePrimes("0123456789"); // 43
			//long answer = FindMinPentagonalDiff(); // 44
			//long answer = FindTriangularPentagonalAndHexagonal(); // 45
			//int answer = FirstCompositeNotSumOfPrimeAndSquare(); // 46
			//long answer = FirstOfNConsecutiveIntegersToHaveNDistinctPrimeFactors(4); // 47
			//long answer = LastTenDigitsOfSumOfSelfPowers(1000); // 48
			//long answer = FindNEquidistantPrimePermutations(3, 4);// 49
			//long answer = SumOfMostConsecutivePrimes(1000000); // 50
			long answer = FindPrimeDigitReplacementPatternFamily(8); // 51

			//int[] r0 = { 59 }, r1 = { 73, 41 }, r2 = { 52, 40, 09 }, r3 = { 26, 53, 06, 34 }, r4 = { 10, 51, 87, 86, 81 }, r5 = { 61, 95, 66, 57, 25, 68 }, r6 = { 90, 81, 80, 38, 92, 67, 73 }, r7 = { 30, 28, 51, 76, 81, 18, 75, 44 }, r8 = { 84, 14, 95, 87, 62, 81, 17, 78, 58 }, r9 = { 21, 46, 71, 58, 02, 79, 62, 39, 31, 09 }, r10 = { 56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15 }, r11 = { 78, 53, 04, 21, 84, 93, 32, 13, 97, 11, 37, 51 }, r12 = { 45, 03, 81, 79, 05, 18, 78, 86, 13, 30, 63, 99, 95 }, r13 = { 39, 87, 96, 28, 03, 38, 42, 17, 82, 87, 58, 07, 22, 57 }, r14 = { 06, 17, 51, 17, 07, 93, 09, 07, 75, 97, 95, 78, 87, 08, 53 }, r15 = { 67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28 }, r16 = { 76, 40, 41, 04, 87, 16, 09, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87 }, r17 = { 12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35 }, r18 = { 70, 39, 06, 05, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86 }, r19 = { 66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 05, 98, 03, 02, 60 }, r20 = { 38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 02, 90, 45, 13, 31, 61, 83, 73, 47 }, r21 = { 36, 10, 63, 96, 60, 49, 41, 05, 37, 42, 14, 58, 84, 93, 96, 17, 09, 43, 05, 43, 06, 59 }, r22 = { 66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18 }, r23 = { 54, 42, 05, 79, 30, 49, 99, 73, 46, 37, 50, 02, 45, 09, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45 }, r24 = { 71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75, 09, 02 }, r25 = { 33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 07, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 05 }, r26 = { 92, 09, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 05, 57, 07, 54, 69, 21, 67, 43, 17, 63, 12 }, r27 = { 24, 59, 06, 08, 98, 74, 66, 26, 61, 60, 13, 03, 09, 09, 24, 30, 71, 08, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34 }, r28 = { 66, 82, 67, 04, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 04, 53, 22, 83, 41, 09, 74, 90 }, r29 = { 48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17, 08, 19, 54, 89, 29, 73, 68, 42, 14, 08, 16, 70, 37 }, r30 = { 37, 60, 69, 70, 72, 71, 09, 59, 13, 60, 38, 13, 57, 36, 09, 30, 43, 89, 30, 39, 15, 02, 44, 73, 05, 73, 26, 63, 56, 86, 12 }, r31 = { 55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 03, 21, 27, 22, 19, 26, 82, 69, 54, 04, 13, 07, 85, 14, 01, 15, 70, 59, 89, 95, 10, 19 }, r32 = { 04, 09, 31, 92, 91, 38, 92, 86, 98, 75, 21, 05, 64, 42, 62, 84, 36, 20, 73, 42, 21, 23, 22, 51, 51, 79, 25, 45, 85, 53, 03, 43, 22 }, r33 = { 75, 63, 02, 49, 14, 12, 89, 14, 60, 78, 92, 16, 44, 82, 38, 30, 72, 11, 46, 52, 90, 27, 08, 65, 78, 03, 85, 41, 57, 79, 39, 52, 33, 48 }, r34 = { 78, 27, 56, 56, 39, 13, 19, 43, 86, 72, 58, 95, 39, 07, 04, 34, 21, 98, 39, 15, 39, 84, 89, 69, 84, 46, 37, 57, 59, 35, 59, 50, 26, 15, 93 }, r35 = { 42, 89, 36, 27, 78, 91, 24, 11, 17, 41, 05, 94, 07, 69, 51, 96, 03, 96, 47, 90, 90, 45, 91, 20, 50, 56, 10, 32, 36, 49, 04, 53, 85, 92, 25, 65 }, r36 = { 52, 09, 61, 30, 61, 97, 66, 21, 96, 92, 98, 90, 06, 34, 96, 60, 32, 69, 68, 33, 75, 84, 18, 31, 71, 50, 84, 63, 03, 03, 19, 11, 28, 42, 75, 45, 45 }, r37 = { 61, 31, 61, 68, 96, 34, 49, 39, 05, 71, 76, 59, 62, 67, 06, 47, 96, 99, 34, 21, 32, 47, 52, 07, 71, 60, 42, 72, 94, 56, 82, 83, 84, 40, 94, 87, 82, 46 }, r38 = { 01, 20, 60, 14, 17, 38, 26, 78, 66, 81, 45, 95, 18, 51, 98, 81, 48, 16, 53, 88, 37, 52, 69, 95, 72, 93, 22, 34, 98, 20, 54, 27, 73, 61, 56, 63, 60, 34, 63 }, r39 = { 93, 42, 94, 83, 47, 61, 27, 51, 79, 79, 45, 01, 44, 73, 31, 70, 83, 42, 88, 25, 53, 51, 30, 15, 65, 94, 80, 44, 61, 84, 12, 77, 02, 62, 02, 65, 94, 42, 14, 94 }, r40 = { 32, 73, 09, 67, 68, 29, 74, 98, 10, 19, 85, 48, 38, 31, 85, 67, 53, 93, 93, 77, 47, 67, 39, 72, 94, 53, 18, 43, 77, 40, 78, 32, 29, 59, 24, 06, 02, 83, 50, 60, 66 }, r41 = { 32, 01, 44, 30, 16, 51, 15, 81, 98, 15, 10, 62, 86, 79, 50, 62, 45, 60, 70, 38, 31, 85, 65, 61, 64, 06, 69, 84, 14, 22, 56, 43, 09, 48, 66, 69, 83, 91, 60, 40, 36, 61 }, r42 = { 92, 48, 22, 99, 15, 95, 64, 43, 01, 16, 94, 02, 99, 19, 17, 69, 11, 58, 97, 56, 89, 31, 77, 45, 67, 96, 12, 73, 08, 20, 36, 47, 81, 44, 50, 64, 68, 85, 40, 81, 85, 52, 09 }, r43 = { 91, 35, 92, 45, 32, 84, 62, 15, 19, 64, 21, 66, 06, 01, 52, 80, 62, 59, 12, 25, 88, 28, 91, 50, 40, 16, 22, 99, 92, 79, 87, 51, 21, 77, 74, 77, 07, 42, 38, 42, 74, 83, 02, 05 }, r44 = { 46, 19, 77, 66, 24, 18, 05, 32, 02, 84, 31, 99, 92, 58, 96, 72, 91, 36, 62, 99, 55, 29, 53, 42, 12, 37, 26, 58, 89, 50, 66, 19, 82, 75, 12, 48, 24, 87, 91, 85, 02, 07, 03, 76, 86 }, r45 = { 99, 98, 84, 93, 07, 17, 33, 61, 92, 20, 66, 60, 24, 66, 40, 30, 67, 05, 37, 29, 24, 96, 03, 27, 70, 62, 13, 04, 45, 47, 59, 88, 43, 20, 66, 15, 46, 92, 30, 04, 71, 66, 78, 70, 53, 99 }, r46 = { 67, 60, 38, 06, 88, 04, 17, 72, 10, 99, 71, 07, 42, 25, 54, 05, 26, 64, 91, 50, 45, 71, 06, 30, 67, 48, 69, 82, 08, 56, 80, 67, 18, 46, 66, 63, 01, 20, 08, 80, 47, 07, 91, 16, 03, 79, 87 }, r47 = { 18, 54, 78, 49, 80, 48, 77, 40, 68, 23, 60, 88, 58, 80, 33, 57, 11, 69, 55, 53, 64, 02, 94, 49, 60, 92, 16, 35, 81, 21, 82, 96, 25, 24, 96, 18, 02, 05, 49, 03, 50, 77, 06, 32, 84, 27, 18, 38 }, r48 = { 68, 01, 50, 04, 03, 21, 42, 94, 53, 24, 89, 05, 92, 26, 52, 36, 68, 11, 85, 01, 04, 42, 02, 45, 15, 06, 50, 04, 53, 73, 25, 74, 81, 88, 98, 21, 67, 84, 79, 97, 99, 20, 95, 04, 40, 46, 02, 58, 87 }, r49 = { 94, 10, 02, 78, 88, 52, 21, 03, 88, 60, 06, 53, 49, 71, 20, 91, 12, 65, 07, 49, 21, 22, 11, 41, 58, 99, 36, 16, 09, 48, 17, 24, 52, 36, 23, 15, 72, 16, 84, 56, 02, 99, 43, 76, 81, 71, 29, 39, 49, 17 }, r50 = { 64, 39, 59, 84, 86, 16, 17, 66, 03, 09, 43, 06, 64, 18, 63, 29, 68, 06, 23, 07, 87, 14, 26, 35, 17, 12, 98, 41, 53, 64, 78, 18, 98, 27, 28, 84, 80, 67, 75, 62, 10, 11, 76, 90, 54, 10, 05, 54, 41, 39, 66 }, r51 = { 43, 83, 18, 37, 32, 31, 52, 29, 95, 47, 08, 76, 35, 11, 04, 53, 35, 43, 34, 10, 52, 57, 12, 36, 20, 39, 40, 55, 78, 44, 07, 31, 38, 26, 08, 15, 56, 88, 86, 01, 52, 62, 10, 24, 32, 05, 60, 65, 53, 28, 57, 99 }, r52 = { 03, 50, 03, 52, 07, 73, 49, 92, 66, 80, 01, 46, 08, 67, 25, 36, 73, 93, 07, 42, 25, 53, 13, 96, 76, 83, 87, 90, 54, 89, 78, 22, 78, 91, 73, 51, 69, 09, 79, 94, 83, 53, 09, 40, 69, 62, 10, 79, 49, 47, 03, 81, 30 }, r53 = { 71, 54, 73, 33, 51, 76, 59, 54, 79, 37, 56, 45, 84, 17, 62, 21, 98, 69, 41, 95, 65, 24, 39, 37, 62, 03, 24, 48, 54, 64, 46, 82, 71, 78, 33, 67, 09, 16, 96, 68, 52, 74, 79, 68, 32, 21, 13, 78, 96, 60, 09, 69, 20, 36 }, r54 = { 73, 26, 21, 44, 46, 38, 17, 83, 65, 98, 07, 23, 52, 46, 61, 97, 33, 13, 60, 31, 70, 15, 36, 77, 31, 58, 56, 93, 75, 68, 21, 36, 69, 53, 90, 75, 25, 82, 39, 50, 65, 94, 29, 30, 11, 33, 11, 13, 96, 02, 56, 47, 07, 49, 02 }, r55 = { 76, 46, 73, 30, 10, 20, 60, 70, 14, 56, 34, 26, 37, 39, 48, 24, 55, 76, 84, 91, 39, 86, 95, 61, 50, 14, 53, 93, 64, 67, 37, 31, 10, 84, 42, 70, 48, 20, 10, 72, 60, 61, 84, 79, 69, 65, 99, 73, 89, 25, 85, 48, 92, 56, 97, 16 }, r56 = { 03, 14, 80, 27, 22, 30, 44, 27, 67, 75, 79, 32, 51, 54, 81, 29, 65, 14, 19, 04, 13, 82, 04, 91, 43, 40, 12, 52, 29, 99, 07, 76, 60, 25, 01, 07, 61, 71, 37, 92, 40, 47, 99, 66, 57, 01, 43, 44, 22, 40, 53, 53, 09, 69, 26, 81, 07 }, r57 = { 49, 80, 56, 90, 93, 87, 47, 13, 75, 28, 87, 23, 72, 79, 32, 18, 27, 20, 28, 10, 37, 59, 21, 18, 70, 04, 79, 96, 03, 31, 45, 71, 81, 06, 14, 18, 17, 05, 31, 50, 92, 79, 23, 47, 09, 39, 47, 91, 43, 54, 69, 47, 42, 95, 62, 46, 32, 85 }, r58 = { 37, 18, 62, 85, 87, 28, 64, 05, 77, 51, 47, 26, 30, 65, 05, 70, 65, 75, 59, 80, 42, 52, 25, 20, 44, 10, 92, 17, 71, 95, 52, 14, 77, 13, 24, 55, 11, 65, 26, 91, 01, 30, 63, 15, 49, 48, 41, 17, 67, 47, 03, 68, 20, 90, 98, 32, 04, 40, 68 }, r59 = { 90, 51, 58, 60, 06, 55, 23, 68, 05, 19, 76, 94, 82, 36, 96, 43, 38, 90, 87, 28, 33, 83, 05, 17, 70, 83, 96, 93, 06, 04, 78, 47, 80, 06, 23, 84, 75, 23, 87, 72, 99, 14, 50, 98, 92, 38, 90, 64, 61, 58, 76, 94, 36, 66, 87, 80, 51, 35, 61, 38 }, r60 = { 57, 95, 64, 06, 53, 36, 82, 51, 40, 33, 47, 14, 07, 98, 78, 65, 39, 58, 53, 06, 50, 53, 04, 69, 40, 68, 36, 69, 75, 78, 75, 60, 03, 32, 39, 24, 74, 47, 26, 90, 13, 40, 44, 71, 90, 76, 51, 24, 36, 50, 25, 45, 70, 80, 61, 80, 61, 43, 90, 64, 11 }, r61 = { 18, 29, 86, 56, 68, 42, 79, 10, 42, 44, 30, 12, 96, 18, 23, 18, 52, 59, 02, 99, 67, 46, 60, 86, 43, 38, 55, 17, 44, 93, 42, 21, 55, 14, 47, 34, 55, 16, 49, 24, 23, 29, 96, 51, 55, 10, 46, 53, 27, 92, 27, 46, 63, 57, 30, 65, 43, 27, 21, 20, 24, 83 }, r62 = { 81, 72, 93, 19, 69, 52, 48, 01, 13, 83, 92, 69, 20, 48, 69, 59, 20, 62, 05, 42, 28, 89, 90, 99, 32, 72, 84, 17, 08, 87, 36, 03, 60, 31, 36, 36, 81, 26, 97, 36, 48, 54, 56, 56, 27, 16, 91, 08, 23, 11, 87, 99, 33, 47, 02, 14, 44, 73, 70, 99, 43, 35, 33 }, r63 = { 90, 56, 61, 86, 56, 12, 70, 59, 63, 32, 01, 15, 81, 47, 71, 76, 95, 32, 65, 80, 54, 70, 34, 51, 40, 45, 33, 04, 64, 55, 78, 68, 88, 47, 31, 47, 68, 87, 03, 84, 23, 44, 89, 72, 35, 08, 31, 76, 63, 26, 90, 85, 96, 67, 65, 91, 19, 14, 17, 86, 04, 71, 32, 95 }, r64 = { 37, 13, 04, 22, 64, 37, 37, 28, 56, 62, 86, 33, 07, 37, 10, 44, 52, 82, 52, 06, 19, 52, 57, 75, 90, 26, 91, 24, 06, 21, 14, 67, 76, 30, 46, 14, 35, 89, 89, 41, 03, 64, 56, 97, 87, 63, 22, 34, 03, 79, 17, 45, 11, 53, 25, 56, 96, 61, 23, 18, 63, 31, 37, 37, 47 }, r65 = { 77, 23, 26, 70, 72, 76, 77, 04, 28, 64, 71, 69, 14, 85, 96, 54, 95, 48, 06, 62, 99, 83, 86, 77, 97, 75, 71, 66, 30, 19, 57, 90, 33, 01, 60, 61, 14, 12, 90, 99, 32, 77, 56, 41, 18, 14, 87, 49, 10, 14, 90, 64, 18, 50, 21, 74, 14, 16, 88, 05, 45, 73, 82, 47, 74, 44 }, r66 = { 22, 97, 41, 13, 34, 31, 54, 61, 56, 94, 03, 24, 59, 27, 98, 77, 04, 09, 37, 40, 12, 26, 87, 09, 71, 70, 07, 18, 64, 57, 80, 21, 12, 71, 83, 94, 60, 39, 73, 79, 73, 19, 97, 32, 64, 29, 41, 07, 48, 84, 85, 67, 12, 74, 95, 20, 24, 52, 41, 67, 56, 61, 29, 93, 35, 72, 69 },
			//	r67 = { 72, 23, 63, 66, 01, 11, 07, 30, 52, 56, 95, 16, 65, 26, 83, 90, 50, 74, 60, 18, 16, 48, 43, 77, 37, 11, 99, 98, 30, 94, 91, 26, 62, 73, 45, 12, 87, 73, 47, 27, 01, 88, 66, 99, 21, 41, 95, 80, 02, 53, 23, 32, 61, 48, 32, 43, 43, 83, 14, 66, 95, 91, 19, 81, 80, 67, 25, 88 }, r68 = { 08, 62, 32, 18, 92, 14, 83, 71, 37, 96, 11, 83, 39, 99, 05, 16, 23, 27, 10, 67, 02, 25, 44, 11, 55, 31, 46, 64, 41, 56, 44, 74, 26, 81, 51, 31, 45, 85, 87, 09, 81, 95, 22, 28, 76, 69, 46, 48, 64, 87, 67, 76, 27, 89, 31, 11, 74, 16, 62, 03, 60, 94, 42, 47, 09, 34, 94, 93, 72 }, r69 = { 56, 18, 90, 18, 42, 17, 42, 32, 14, 86, 06, 53, 33, 95, 99, 35, 29, 15, 44, 20, 49, 59, 25, 54, 34, 59, 84, 21, 23, 54, 35, 90, 78, 16, 93, 13, 37, 88, 54, 19, 86, 67, 68, 55, 66, 84, 65, 42, 98, 37, 87, 56, 33, 28, 58, 38, 28, 38, 66, 27, 52, 21, 81, 15, 08, 22, 97, 32, 85, 27 }, r70 = { 91, 53, 40, 28, 13, 34, 91, 25, 01, 63, 50, 37, 22, 49, 71, 58, 32, 28, 30, 18, 68, 94, 23, 83, 63, 62, 94, 76, 80, 41, 90, 22, 82, 52, 29, 12, 18, 56, 10, 08, 35, 14, 37, 57, 23, 65, 67, 40, 72, 39, 93, 39, 70, 89, 40, 34, 07, 46, 94, 22, 20, 05, 53, 64, 56, 30, 05, 56, 61, 88, 27 }, r71 = { 23, 95, 11, 12, 37, 69, 68, 24, 66, 10, 87, 70, 43, 50, 75, 07, 62, 41, 83, 58, 95, 93, 89, 79, 45, 39, 02, 22, 05, 22, 95, 43, 62, 11, 68, 29, 17, 40, 26, 44, 25, 71, 87, 16, 70, 85, 19, 25, 59, 94, 90, 41, 41, 80, 61, 70, 55, 60, 84, 33, 95, 76, 42, 63, 15, 09, 03, 40, 38, 12, 03, 32 }, r72 = { 09, 84, 56, 80, 61, 55, 85, 97, 16, 94, 82, 94, 98, 57, 84, 30, 84, 48, 93, 90, 71, 05, 95, 90, 73, 17, 30, 98, 40, 64, 65, 89, 07, 79, 09, 19, 56, 36, 42, 30, 23, 69, 73, 72, 07, 05, 27, 61, 24, 31, 43, 48, 71, 84, 21, 28, 26, 65, 65, 59, 65, 74, 77, 20, 10, 81, 61, 84, 95, 08, 52, 23, 70 }, r73 = { 47, 81, 28, 09, 98, 51, 67, 64, 35, 51, 59, 36, 92, 82, 77, 65, 80, 24, 72, 53, 22, 07, 27, 10, 21, 28, 30, 22, 48, 82, 80, 48, 56, 20, 14, 43, 18, 25, 50, 95, 90, 31, 77, 08, 09, 48, 44, 80, 90, 22, 93, 45, 82, 17, 13, 96, 25, 26, 08, 73, 34, 99, 06, 49, 24, 06, 83, 51, 40, 14, 15, 10, 25, 01 }, r74 = { 54, 25, 10, 81, 30, 64, 24, 74, 75, 80, 36, 75, 82, 60, 22, 69, 72, 91, 45, 67, 03, 62, 79, 54, 89, 74, 44, 83, 64, 96, 66, 73, 44, 30, 74, 50, 37, 05, 09, 97, 70, 01, 60, 46, 37, 91, 39, 75, 75, 18, 58, 52, 72, 78, 51, 81, 86, 52, 08, 97, 01, 46, 43, 66, 98, 62, 81, 18, 70, 93, 73, 08, 32, 46, 34 }, r75 = { 96, 80, 82, 07, 59, 71, 92, 53, 19, 20, 88, 66, 03, 26, 26, 10, 24, 27, 50, 82, 94, 73, 63, 08, 51, 33, 22, 45, 19, 13, 58, 33, 90, 15, 22, 50, 36, 13, 55, 06, 35, 47, 82, 52, 33, 61, 36, 27, 28, 46, 98, 14, 73, 20, 73, 32, 16, 26, 80, 53, 47, 66, 76, 38, 94, 45, 02, 01, 22, 52, 47, 96, 64, 58, 52, 39 }, r76 = { 88, 46, 23, 39, 74, 63, 81, 64, 20, 90, 33, 33, 76, 55, 58, 26, 10, 46, 42, 26, 74, 74, 12, 83, 32, 43, 09, 02, 73, 55, 86, 54, 85, 34, 28, 23, 29, 79, 91, 62, 47, 41, 82, 87, 99, 22, 48, 90, 20, 05, 96, 75, 95, 04, 43, 28, 81, 39, 81, 01, 28, 42, 78, 25, 39, 77, 90, 57, 58, 98, 17, 36, 73, 22, 63, 74, 51 }, r77 = { 29, 39, 74, 94, 95, 78, 64, 24, 38, 86, 63, 87, 93, 06, 70, 92, 22, 16, 80, 64, 29, 52, 20, 27, 23, 50, 14, 13, 87, 15, 72, 96, 81, 22, 08, 49, 72, 30, 70, 24, 79, 31, 16, 64, 59, 21, 89, 34, 96, 91, 48, 76, 43, 53, 88, 01, 57, 80, 23, 81, 90, 79, 58, 01, 80, 87, 17, 99, 86, 90, 72, 63, 32, 69, 14, 28, 88, 69 }, r78 = { 37, 17, 71, 95, 56, 93, 71, 35, 43, 45, 04, 98, 92, 94, 84, 96, 11, 30, 31, 27, 31, 60, 92, 03, 48, 05, 98, 91, 86, 94, 35, 90, 90, 08, 48, 19, 33, 28, 68, 37, 59, 26, 65, 96, 50, 68, 22, 07, 09, 49, 34, 31, 77, 49, 43, 06, 75, 17, 81, 87, 61, 79, 52, 26, 27, 72, 29, 50, 07, 98, 86, 01, 17, 10, 46, 64, 24, 18, 56 }, r79 = { 51, 30, 25, 94, 88, 85, 79, 91, 40, 33, 63, 84, 49, 67, 98, 92, 15, 26, 75, 19, 82, 05, 18, 78, 65, 93, 61, 48, 91, 43, 59, 41, 70, 51, 22, 15, 92, 81, 67, 91, 46, 98, 11, 11, 65, 31, 66, 10, 98, 65, 83, 21, 05, 56, 05, 98, 73, 67, 46, 74, 69, 34, 08, 30, 05, 52, 07, 98, 32, 95, 30, 94, 65, 50, 24, 63, 28, 81, 99, 57 }, r80 = { 19, 23, 61, 36, 09, 89, 71, 98, 65, 17, 30, 29, 89, 26, 79, 74, 94, 11, 44, 48, 97, 54, 81, 55, 39, 66, 69, 45, 28, 47, 13, 86, 15, 76, 74, 70, 84, 32, 36, 33, 79, 20, 78, 14, 41, 47, 89, 28, 81, 05, 99, 66, 81, 86, 38, 26, 06, 25, 13, 60, 54, 55, 23, 53, 27, 05, 89, 25, 23, 11, 13, 54, 59, 54, 56, 34, 16, 24, 53, 44, 06 }, r81 = { 13, 40, 57, 72, 21, 15, 60, 08, 04, 19, 11, 98, 34, 45, 09, 97, 86, 71, 03, 15, 56, 19, 15, 44, 97, 31, 90, 04, 87, 87, 76, 08, 12, 30, 24, 62, 84, 28, 12, 85, 82, 53, 99, 52, 13, 94, 06, 65, 97, 86, 09, 50, 94, 68, 69, 74, 30, 67, 87, 94, 63, 07, 78, 27, 80, 36, 69, 41, 06, 92, 32, 78, 37, 82, 30, 05, 18, 87, 99, 72, 19, 99 }, r82 = { 44, 20, 55, 77, 69, 91, 27, 31, 28, 81, 80, 27, 02, 07, 97, 23, 95, 98, 12, 25, 75, 29, 47, 71, 07, 47, 78, 39, 41, 59, 27, 76, 13, 15, 66, 61, 68, 35, 69, 86, 16, 53, 67, 63, 99, 85, 41, 56, 08, 28, 33, 40, 94, 76, 90, 85, 31, 70, 24, 65, 84, 65, 99, 82, 19, 25, 54, 37, 21, 46, 33, 02, 52, 99, 51, 33, 26, 04, 87, 02, 08, 18, 96 }, r83 = { 54, 42, 61, 45, 91, 06, 64, 79, 80, 82, 32, 16, 83, 63, 42, 49, 19, 78, 65, 97, 40, 42, 14, 61, 49, 34, 04, 18, 25, 98, 59, 30, 82, 72, 26, 88, 54, 36, 21, 75, 03, 88, 99, 53, 46, 51, 55, 78, 22, 94, 34, 40, 68, 87, 84, 25, 30, 76, 25, 08, 92, 84, 42, 61, 40, 38, 09, 99, 40, 23, 29, 39, 46, 55, 10, 90, 35, 84, 56, 70, 63, 23, 91, 39 }, r84 = { 52, 92, 03, 71, 89, 07, 09, 37, 68, 66, 58, 20, 44, 92, 51, 56, 13, 71, 79, 99, 26, 37, 02, 06, 16, 67, 36, 52, 58, 16, 79, 73, 56, 60, 59, 27, 44, 77, 94, 82, 20, 50, 98, 33, 09, 87, 94, 37, 40, 83, 64, 83, 58, 85, 17, 76, 53, 02, 83, 52, 22, 27, 39, 20, 48, 92, 45, 21, 09, 42, 24, 23, 12, 37, 52, 28, 50, 78, 79, 20, 86, 62, 73, 20, 59 }, r85 = { 54, 96, 80, 15, 91, 90, 99, 70, 10, 09, 58, 90, 93, 50, 81, 99, 54, 38, 36, 10, 30, 11, 35, 84, 16, 45, 82, 18, 11, 97, 36, 43, 96, 79, 97, 65, 40, 48, 23, 19, 17, 31, 64, 52, 65, 65, 37, 32, 65, 76, 99, 79, 34, 65, 79, 27, 55, 33, 03, 01, 33, 27, 61, 28, 66, 08, 04, 70, 49, 46, 48, 83, 01, 45, 19, 96, 13, 81, 14, 21, 31, 79, 93, 85, 50, 05 }, r86 = { 92, 92, 48, 84, 59, 98, 31, 53, 23, 27, 15, 22, 79, 95, 24, 76, 05, 79, 16, 93, 97, 89, 38, 89, 42, 83, 02, 88, 94, 95, 82, 21, 01, 97, 48, 39, 31, 78, 09, 65, 50, 56, 97, 61, 01, 07, 65, 27, 21, 23, 14, 15, 80, 97, 44, 78, 49, 35, 33, 45, 81, 74, 34, 05, 31, 57, 09, 38, 94, 07, 69, 54, 69, 32, 65, 68, 46, 68, 78, 90, 24, 28, 49, 51, 45, 86, 35 }, r87 = { 41, 63, 89, 76, 87, 31, 86, 09, 46, 14, 87, 82, 22, 29, 47, 16, 13, 10, 70, 72, 82, 95, 48, 64, 58, 43, 13, 75, 42, 69, 21, 12, 67, 13, 64, 85, 58, 23, 98, 09, 37, 76, 05, 22, 31, 12, 66, 50, 29, 99, 86, 72, 45, 25, 10, 28, 19, 06, 90, 43, 29, 31, 67, 79, 46, 25, 74, 14, 97, 35, 76, 37, 65, 46, 23, 82, 06, 22, 30, 76, 93, 66, 94, 17, 96, 13, 20, 72 }, r88 = { 63, 40, 78, 08, 52, 09, 90, 41, 70, 28, 36, 14, 46, 44, 85, 96, 24, 52, 58, 15, 87, 37, 05, 98, 99, 39, 13, 61, 76, 38, 44, 99, 83, 74, 90, 22, 53, 80, 56, 98, 30, 51, 63, 39, 44, 30, 91, 91, 04, 22, 27, 73, 17, 35, 53, 18, 35, 45, 54, 56, 27, 78, 48, 13, 69, 36, 44, 38, 71, 25, 30, 56, 15, 22, 73, 43, 32, 69, 59, 25, 93, 83, 45, 11, 34, 94, 44, 39, 92 }, r89 = { 12, 36, 56, 88, 13, 96, 16, 12, 55, 54, 11, 47, 19, 78, 17, 17, 68, 81, 77, 51, 42, 55, 99, 85, 66, 27, 81, 79, 93, 42, 65, 61, 69, 74, 14, 01, 18, 56, 12, 01, 58, 37, 91, 22, 42, 66, 83, 25, 19, 04, 96, 41, 25, 45, 18, 69, 96, 88, 36, 93, 10, 12, 98, 32, 44, 83, 83, 04, 72, 91, 04, 27, 73, 07, 34, 37, 71, 60, 59, 31, 01, 54, 54, 44, 96, 93, 83, 36, 04, 45 }, r90 = { 30, 18, 22, 20, 42, 96, 65, 79, 17, 41, 55, 69, 94, 81, 29, 80, 91, 31, 85, 25, 47, 26, 43, 49, 02, 99, 34, 67, 99, 76, 16, 14, 15, 93, 08, 32, 99, 44, 61, 77, 67, 50, 43, 55, 87, 55, 53, 72, 17, 46, 62, 25, 50, 99, 73, 05, 93, 48, 17, 31, 70, 80, 59, 09, 44, 59, 45, 13, 74, 66, 58, 94, 87, 73, 16, 14, 85, 38, 74, 99, 64, 23, 79, 28, 71, 42, 20, 37, 82, 31, 23 }, r91 = { 51, 96, 39, 65, 46, 71, 56, 13, 29, 68, 53, 86, 45, 33, 51, 49, 12, 91, 21, 21, 76, 85, 02, 17, 98, 15, 46, 12, 60, 21, 88, 30, 92, 83, 44, 59, 42, 50, 27, 88, 46, 86, 94, 73, 45, 54, 23, 24, 14, 10, 94, 21, 20, 34, 23, 51, 04, 83, 99, 75, 90, 63, 60, 16, 22, 33, 83, 70, 11, 32, 10, 50, 29, 30, 83, 46, 11, 05, 31, 17, 86, 42, 49, 01, 44, 63, 28, 60, 07, 78, 95, 40 }, r92 = { 44, 61, 89, 59, 04, 49, 51, 27, 69, 71, 46, 76, 44, 04, 09, 34, 56, 39, 15, 06, 94, 91, 75, 90, 65, 27, 56, 23, 74, 06, 23, 33, 36, 69, 14, 39, 05, 34, 35, 57, 33, 22, 76, 46, 56, 10, 61, 65, 98, 09, 16, 69, 04, 62, 65, 18, 99, 76, 49, 18, 72, 66, 73, 83, 82, 40, 76, 31, 89, 91, 27, 88, 17, 35, 41, 35, 32, 51, 32, 67, 52, 68, 74, 85, 80, 57, 07, 11, 62, 66, 47, 22, 67 }, r93 = { 65, 37, 19, 97, 26, 17, 16, 24, 24, 17, 50, 37, 64, 82, 24, 36, 32, 11, 68, 34, 69, 31, 32, 89, 79, 93, 96, 68, 49, 90, 14, 23, 04, 04, 67, 99, 81, 74, 70, 74, 36, 96, 68, 09, 64, 39, 88, 35, 54, 89, 96, 58, 66, 27, 88, 97, 32, 14, 06, 35, 78, 20, 71, 06, 85, 66, 57, 02, 58, 91, 72, 05, 29, 56, 73, 48, 86, 52, 09, 93, 22, 57, 79, 42, 12, 01, 31, 68, 17, 59, 63, 76, 07, 77 }, r94 = { 73, 81, 14, 13, 17, 20, 11, 09, 01, 83, 08, 85, 91, 70, 84, 63, 62, 77, 37, 07, 47, 01, 59, 95, 39, 69, 39, 21, 99, 09, 87, 02, 97, 16, 92, 36, 74, 71, 90, 66, 33, 73, 73, 75, 52, 91, 11, 12, 26, 53, 05, 26, 26, 48, 61, 50, 90, 65, 01, 87, 42, 47, 74, 35, 22, 73, 24, 26, 56, 70, 52, 05, 48, 41, 31, 18, 83, 27, 21, 39, 80, 85, 26, 08, 44, 02, 71, 07, 63, 22, 05, 52, 19, 08, 20 }, r95 = { 17, 25, 21, 11, 72, 93, 33, 49, 64, 23, 53, 82, 03, 13, 91, 65, 85, 02, 40, 05, 42, 31, 77, 42, 05, 36, 06, 54, 04, 58, 07, 76, 87, 83, 25, 57, 66, 12, 74, 33, 85, 37, 74, 32, 20, 69, 03, 97, 91, 68, 82, 44, 19, 14, 89, 28, 85, 85, 80, 53, 34, 87, 58, 98, 88, 78, 48, 65, 98, 40, 11, 57, 10, 67, 70, 81, 60, 79, 74, 72, 97, 59, 79, 47, 30, 20, 54, 80, 89, 91, 14, 05, 33, 36, 79, 39 },
			//	r96 = { 60, 85, 59, 39, 60, 07, 57, 76, 77, 92, 06, 35, 15, 72, 23, 41, 45, 52, 95, 18, 64, 79, 86, 53, 56, 31, 69, 11, 91, 31, 84, 50, 44, 82, 22, 81, 41, 40, 30, 42, 30, 91, 48, 94, 74, 76, 64, 58, 74, 25, 96, 57, 14, 19, 03, 99, 28, 83, 15, 75, 99, 01, 89, 85, 79, 50, 03, 95, 32, 67, 44, 08, 07, 41, 62, 64, 29, 20, 14, 76, 26, 55, 48, 71, 69, 66, 19, 72, 44, 25, 14, 01, 48, 74, 12, 98, 07 }, r97 = { 64, 66, 84, 24, 18, 16, 27, 48, 20, 14, 47, 69, 30, 86, 48, 40, 23, 16, 61, 21, 51, 50, 26, 47, 35, 33, 91, 28, 78, 64, 43, 68, 04, 79, 51, 08, 19, 60, 52, 95, 06, 68, 46, 86, 35, 97, 27, 58, 04, 65, 30, 58, 99, 12, 12, 75, 91, 39, 50, 31, 42, 64, 70, 04, 46, 07, 98, 73, 98, 93, 37, 89, 77, 91, 64, 71, 64, 65, 66, 21, 78, 62, 81, 74, 42, 20, 83, 70, 73, 95, 78, 45, 92, 27, 34, 53, 71, 15 }, r98 = { 30, 11, 85, 31, 34, 71, 13, 48, 05, 14, 44, 03, 19, 67, 23, 73, 19, 57, 06, 90, 94, 72, 57, 69, 81, 62, 59, 68, 88, 57, 55, 69, 49, 13, 07, 87, 97, 80, 89, 05, 71, 05, 05, 26, 38, 40, 16, 62, 45, 99, 18, 38, 98, 24, 21, 26, 62, 74, 69, 04, 85, 57, 77, 35, 58, 67, 91, 79, 79, 57, 86, 28, 66, 34, 72, 51, 76, 78, 36, 95, 63, 90, 08, 78, 47, 63, 45, 31, 22, 70, 52, 48, 79, 94, 15, 77, 61, 67, 68 }, r99 = { 23, 33, 44, 81, 80, 92, 93, 75, 94, 88, 23, 61, 39, 76, 22, 03, 28, 94, 32, 06, 49, 65, 41, 34, 18, 23, 08, 47, 62, 60, 03, 63, 33, 13, 80, 52, 31, 54, 73, 43, 70, 26, 16, 69, 57, 87, 83, 31, 03, 93, 70, 81, 47, 95, 77, 44, 29, 68, 39, 51, 56, 59, 63, 07, 25, 70, 07, 77, 43, 53, 64, 03, 94, 42, 95, 39, 18, 01, 66, 21, 16, 97, 20, 50, 90, 16, 70, 10, 95, 69, 29, 06, 25, 61, 41, 26, 15, 59, 63, 35 };
			//long answer = FindMaxPathSum(new int[][] { r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99 }); // 67

			// TODO ========= int answer = FindProductSumNumbers(12000); // 88
			Console.WriteLine();
			Console.WriteLine(answer);
			Console.WriteLine();
			Console.Write("Press any key to continue...");
			Console.ReadKey();
		}

		// https://projecteuler.net/problem=88
		public static int FindProductSumNumbers(int upTo) {
			var numbers = new HashSet<int>();
			for (int setSize = 2; setSize <= upTo; setSize++) {
				int min = setSize + (setSize % 2 == 0 ? 2 : 1);
				int max = setSize * 2;
				for (int i = min; i <= max; i += 2) {
					int factor = 2;
					int quotient = i / factor;
					int factorCount = 2;
					if (setSize - factorCount == i - factor + quotient)
						break;
				}
			}
			int answer = 0;
			var sorted = new List<int>(numbers);
			sorted.Sort();
			foreach (int n in numbers) {
				answer += n;
			}
			return answer;
		}

		// https://projecteuler.net/problem=51
		public static long FindPrimeDigitReplacementPatternFamily(int familySize) {
			var primes = new List<long>(1000);
			long start = familySize == 7 ? 56003 : familySize < 7 ? 13 : 2090021;
			for (long magnitude = 10; magnitude < 1000000000; magnitude *= 10) {
				long range = magnitude * 10;
				for (long i = Math.Max(magnitude + 1, start); i < range; i += 2) {
					if (IsPrime(i, primes)) {
						string family = i.ToString();
						char dupDigit = (char)0;
						if (familySize < 7) {
							dupDigit = family[0];
						} else {
							for (int j = 2; j < family.Length; j++) {
								for (int k = j; k < family.Length; k++) {
									if (family[j - 1] == family[k]) {
										dupDigit = family[k];
										break;
									}
								}
							}
						}
						if (dupDigit > 0) {
							int memberCount = 0;
							long member = 0;
							long youngest = 0;
							char minChar = family[0] == dupDigit ? '1' : '0';
							for (char c = '9'; c >= minChar; c--) {
								string child = family.Replace(dupDigit, c);
								member = long.Parse(child);
								if (IsPrime(member, primes)) {
									Console.WriteLine(member);
									memberCount++;
									youngest = member;
								}
							}
							if (memberCount >= familySize) {
								Console.WriteLine(family);
								return youngest;
							}
						}
					}
				}
			}
			return 0;
		}

		// https://projecteuler.net/problem=50
		public static long SumOfMostConsecutivePrimes(long below) {
			var primes = new List<long>(1000);
			var longestList = new List<long>(1);
			long listSum = 0;
			for (long x = 1; x < below; x += 2) {
				if (x == 1 || IsPrime(x, primes)) {
					var list = new List<long>(100);
					long primeSum = 0;
					long sum = 0;
					long i = x;
					if (x == 1) {
						list.Add(2);
						primeSum = 2;
						sum = 2;
						i = 3;
					}
					int listCount = list.Count;
					for (; i < below && sum + i < below; i += 2) {
						if (IsPrime(i, primes)) {
							list.Add(i);
							sum += i;
							if (IsPrime(sum, primes)) {
								listCount = list.Count;
								primeSum = sum;
							}
						}
					}
					if (longestList.Count < listCount) {
						longestList = list.GetRange(0, listCount);
						listSum = primeSum;
						Console.Write(x);
						Console.Write(" ");
						Console.WriteLine(listSum);
					}
				}
			}
			Console.WriteLine();
			Console.WriteLine(string.Join(" ", longestList));
			return listSum;
		}

		// https://projecteuler.net/problem=49
		public static long FindNEquidistantPrimePermutations(int n, int length) {
			long[] factorials = GetFactorials(length, true);
			long permutationCount = factorials[length - 1];
			var permutations = new HashSet<long>();
			var primes = new List<long>(1000);
			for (int i = 8743; i < 10000; i += 2) {
				if (IsPrime(i, primes)) {
					string digits = i.ToString();
					permutations.Clear();
					for (int j = 0; j < permutationCount; j++) {
						long permutation = long.Parse(FindNthLexicographicPermutation(digits, j, factorials));
						if (IsPrime(permutation, primes)) {
							permutations.Add(permutation);
						}
					}
					var sorted = new List<long>(permutations);
					sorted.Sort();
					for (int i1 = 0; i1 < sorted.Count - 2; i1++) {
						for (int i2 = i1 + 1; i2 < sorted.Count - 1; i2++) {
							long diff = sorted[i2] - sorted[i1];
							for (int i3 = i2 + 1; i3 < sorted.Count; i3++) {
								if (diff == sorted[i3] - sorted[i2]) {
									return sorted[i1] * 100000000 + sorted[i2] * 10000 + sorted[i3];
								}
							}
						}
					}
				}
			}
			return 0;
		}

		// https://projecteuler.net/problem=48
		public static long LastTenDigitsOfSumOfSelfPowers(int upTo) {
			long sum = 0;
			long threshold = (long)Math.Pow(10, 10);
			for (int i = 1; i <= upTo; i++) {
				long k = i;
				for (int j = 1; j < i; j++) {
					k *= i;
					k %= threshold;
				}
				sum += k;
			}
			return sum % threshold;
		}

		// https://projecteuler.net/problem=47
		public static int FirstOfNConsecutiveIntegersToHaveNDistinctPrimeFactors(int n) {
			var primes = new List<long>(1000);
			int first = 2;
			primes.Add(first);
			for (int i = 1, k = 3; i < n; i++, k += 2) {
				while (!IsPrime(k, primes)) {
					k += 2;
				}
				first *= k;
			}
			IsPrime(int.MaxValue, primes);
			bool consecutive = true;
			for (int i = first + 1; i < int.MaxValue; i++) {
				int k = i;
				int factorCount = 0;
				for (int j = 0; k > 1 && factorCount < n && j < primes.Count; j++) {
					int prime = (int)primes[j];
					if (k % prime == 0) {
						factorCount++;
						k /= prime;
					}
					while (k % prime == 0) {
						k /= prime;
					}
				}
				if (factorCount != n) {
					consecutive = false;
				} else if (!consecutive) {
					consecutive = true;
					first = i;
				} else if (i - first + 1 == n) {
					return first;
				}
			}
			return 0;
		}

		// https://projecteuler.net/problem=46
		public static int FirstCompositeNotSumOfPrimeAndSquare() {
			var primes = new List<long>(1000);
			for (int i = 3; i < int.MaxValue; i += 2) {
				if (!IsPrime(i, primes)) {
					for (int j = i - 2; j > 2; j -= 2) {
						if (IsPrime(j, primes)) {
							int square = (i - j) / 2;
							int sqrt = (int)Math.Floor(Math.Sqrt(square));
							if (sqrt * sqrt == square) {
								goto next;
							}
						}
					}
					return i;
				}
			next:
				;
			}
			return 0;
		}

		// https://projecteuler.net/problem=45
		public static long FindTriangularPentagonalAndHexagonal() {
			var pentagonals = new Queue<long>();
			var hexagonals = new Queue<long>();
			for (long n = 1; n <= 55385; n++) {
				long triangular = n * (n + 1) / 2;
				long pentagonal = n * (3 * n - 1) / 2;
				long hexagonal = n * (2 * n - 1);
				//Console.WriteLine(triangular.ToString().PadLeft(5) + pentagonal.ToString().PadLeft(5) + hexagonal.ToString().PadLeft(5));
				pentagonals.Enqueue(pentagonal);
				hexagonals.Enqueue(hexagonal);
				while (pentagonals.Peek() < triangular) {
					pentagonals.Dequeue();
				}
				while (hexagonals.Peek() < triangular) {
					hexagonals.Dequeue();
				}
				if (pentagonals.Peek() > triangular) {
					continue;
				}
				if (hexagonals.Peek() > triangular) {
					continue;
				}
				pentagonals.Dequeue();
				hexagonals.Dequeue();
				Console.WriteLine(n.ToString().PadLeft(6) + triangular.ToString().PadLeft(11));
				if (n > 285) {
					return triangular;
				}
			}
			return 0;
		}

		// https://projecteuler.net/problem=44
		public static long FindMinPentagonalDiff(bool print = false) {
			int[] pentagonals = new int[10000];
			for (int n = 1; n <= pentagonals.Length; n++) {
				int pentagonal = n * (3 * n - 1) / 2;
				pentagonals[n - 1] = pentagonal;
				if (print) {
					Console.Write(pentagonal.ToString().PadLeft(6));
					if (n % 10 == 0) {
						Console.WriteLine();
					}
				}
			}
			var pentagonalSet = new HashSet<int>(pentagonals);
			if (print) {
				for (int i = 1; i < pentagonals.Length; i++) {
					int n = (int)Math.Ceiling(Math.Sqrt((pentagonals[i] + 1) * 2 / 3));
					Console.Write(n.ToString().PadLeft(6));
					if (n % 10 == 0) {
						Console.WriteLine();
					}
				}
			}
			int minDiff = int.MaxValue;
			for (int n = 1; n < pentagonals.Length; n++) {
				for (int o = n; o >= 0; o--) {
					int p1 = pentagonals[n];
					int p2 = pentagonals[o];
					if (pentagonalSet.Contains(p1 + p2) && pentagonalSet.Contains(p1 - p2)) {
						if (minDiff > p1 - p2) {
							minDiff = p1 - p2;
							Console.WriteLine(p1 + " - " + p2);
						}
					}
				}
			}
			return minDiff;
		}

		// https://projecteuler.net/problem=43
		public static long SumPandigitalsSubStringDivisibleByConsecutivePrimes(string digitsSorted) {
			long sum = 0;
			int length = digitsSorted.Length;
			long[] factorials = GetFactorials(length, true);
			var primes = new long[] { 17, 13, 11, 7, 5, 3, 2 };
			long end = factorials[length - 1];
			for (long i = 1; i <= end; i++) {
				long permutation = long.Parse(FindNthLexicographicPermutation(digitsSorted, i, factorials));
				long k = permutation;
				for (int j = 0; j < primes.Length; j++) {
					if (k % 1000 % primes[j] > 0) {
						goto next;
					}
					k /= 10;
				}
				sum += permutation;
				Console.Write(permutation);
				Console.Write(" ");
			next:
				;
			}
			return sum;
		}

		// https://projecteuler.net/problem=42
		public static int CountTriangleWords(params string[] words) {
			int count = 0;
			for (int i = 0; i < words.Length; i++) {
				int sum = -64 * words[i].Length;
				for (int j = 0; j < words[i].Length; j++) {
					sum += words[i][j];
				}
				int n = (int)Math.Floor(Math.Sqrt(sum * 2 - 1));
				if (n * (n + 1) / 2 == sum) {
					count++;
					Console.Write(words[i]);
					Console.Write(" ");
				}
			}
			return count;
		}

		// https://projecteuler.net/problem=41
		public static int LargestPandigitalPrime(string digitsSortedDesc) {
			int length = digitsSortedDesc.Length;
			long[] factorials = GetFactorials(length, true);
			var primes = new List<long>(1000);
			for (int len = length; len > 0; len--) {
				string digits = digitsSortedDesc.Substring(length - len);
				long factorial = factorials[len - 1];
				for (int i = 1; i <= factorial; i++) {
					int permutation = int.Parse(FindNthLexicographicPermutation(digits, i, factorials));
					if (IsPrime(permutation, primes)) {
						return permutation;
					}
				}
			}
			return 0;
		}

		// https://projecteuler.net/problem=40
		public static int ProductOfPowersOfTenDigitsOfChampernownesConstant(int upToMagnitude) {
			int product = 1;
			int digitCount = 0;
			int nextPowerOfTen = 1;
			for (int magnitude = 1; magnitude < upToMagnitude; magnitude *= 10) {
				int range = magnitude * 10;
				int digits = (int)Math.Log10(range);
				for (int i = magnitude; i < range; i++) {
					digitCount += digits;
					if (digitCount >= nextPowerOfTen) {
						int power = range;
						for (int n = digitCount - digits; n < nextPowerOfTen; n++) {
							power /= 10;
						}
						int factor = (i % (power * 10)) / power;
						product *= factor;
						nextPowerOfTen *= 10;
						if (nextPowerOfTen > upToMagnitude) {
							return product;
						}
					}
				}
			}
			throw new ApplicationException("Can't get here");
		}

		// https://projecteuler.net/problem=39
		public static int SolveIntegerRightTriangles(int upTo) {
			int[] squares = new int[upTo + 1];
			for (int i = 0; i <= upTo; i++) {
				squares[i] = i * i;
			}
			int maxSolutions = 0;
			int maxPerimeter = 0;
			for (int perimeter = 12; perimeter < squares.Length; perimeter++) {
				var solutions = new List<int[]>();
				int mid = perimeter / 2 + 1;
				for (int c = perimeter / 3 + 1; c < mid; c++) {
					int ab = perimeter - c;
					for (int b = ab / 2 + ab % 2; b < ab; b++) {
						int a = ab - b;
						if (squares[a] + squares[b] == squares[c]) {
							solutions.Add(new int[] { a, b, c });
						}
					}
				}
				if (maxSolutions < solutions.Count) {
					maxSolutions = solutions.Count;
					maxPerimeter = perimeter;
					foreach (int[] s in solutions) {
						Console.Write("{" + s[0] + "," + s[1] + "," + s[2] + "} ");
					}
					Console.WriteLine(perimeter);
				}
			}
			return maxPerimeter;
		}

		// https://projecteuler.net/problem=38
		public static int LargestPandigitalMultiple() {
			int answer = 0;
			for (int magnitude = 10; magnitude <= 10000; magnitude *= 10) {
				var digits = new StringBuilder();
				int range = 1000000000 / magnitude;
				for (int i = magnitude - (magnitude / 10); i < magnitude; i++) {
					if (answer / range > i) {
						continue;
					}
					digits.Clear();
					for (int multiple = 1; digits.Length < 9; multiple++) {
						digits.Append(i * multiple);
					}
					if (digits.Length > 9) {
						continue;
					}
					var used = new bool[10];
					used[0] = true;
					for (int j = 0; j < digits.Length; j++) {
						used[digits[j] - 48] = true;
					}
					if (used.All(x => x)) {
						int result = int.Parse(digits.ToString());
						if (answer < result) {
							answer = result;
							Console.WriteLine(answer + " " + i);
						}
					}
				}
			}
			return answer;
		}

		// https://projecteuler.net/problem=37
		public static long SumTruncatablePrimes() {
			long answer = 0;
			var primes = new List<long>(10000);
			var primeEndDigits = new List<long> { 1, 3, 7, 9 };
			var singleDigitPrimes = new List<long> { 2, 3, 5, 7 };
			for (long magnitude = 100; magnitude < int.MaxValue; magnitude *= 10) {
				int digitCount = (int)Math.Log10(magnitude);
				for (long range = magnitude / 10, i = range + 1; i < magnitude; i += 2) {
					if (!singleDigitPrimes.Contains(i / range)) {
						i += range - 2;
						goto next;
					}
					var leftTruncations = new long[digitCount - 1];
					int powerLog10 = digitCount;
					for (long k = i % range, power = range / 10; power > 1; k %= power, power /= 10) {
						if (!primeEndDigits.Contains(k / power)) {
							i += power - 2;
							goto next;
						}
						powerLog10--;
						leftTruncations[powerLog10 - 1] = k;
					}
					leftTruncations[0] = i % 10;
					for (int j = 0; j < leftTruncations.Length; j++) {
						if (!IsPrime(leftTruncations[j], primes)) {
							goto next;
						}
					}
					if (!IsPrime(i, primes)) {
						goto next;
					}
					for (long k = i / 10; k > 0; k /= 10) {
						if (!IsPrime(k, primes)) {
							goto next;
						}
					}

					Console.WriteLine(i);
					answer += i;
				next:
					;
				}
			}

			return answer;
		}

		// https://projecteuler.net/problem=36
		public static int FindDoubleBasePalindromes() {
			int answer = 0;
			int[] powersOfTwo = new int[20];
			powersOfTwo[0] = 1;
			for (int i = 1; i < powersOfTwo.Length; i++)
				powersOfTwo[i] = 2 * powersOfTwo[i - 1];
			for (int i = 1; i < 1000000; i++) {
				string test = i.ToString();
				for (int j = 0; j < test.Length / 2; j++) {
					if (test[j] != test[test.Length - 1 - j])
						goto next;
				}

				test = "";
				int exponent = powersOfTwo.Length - 1;
				while (powersOfTwo[exponent] > i)
					exponent--;
				int k = i;
				for (; exponent >= 0; exponent--) {
					int power = powersOfTwo[exponent];
					test += k < power ? "0" : "1";
					if (k >= power)
						k -= power;
				}

				for (int j = 0; j < test.Length / 2; j++) {
					if (test[j] != test[test.Length - 1 - j])
						goto next;
				}

				answer += i;
				Console.WriteLine(i + " = " + test);
			next:
				;
			}
			return answer;
		}

		// https://projecteuler.net/problem=35
		public static int FindCircularPrimes(int below) {
			int count = 1; // we already know 2 is a circular prime
			var primes = new List<long>(1000);
			for (int i = 3; i < below; i += 2) {
				if (IsPrime(i, primes)) {
					string rotation = i.ToString();
					int rotations = rotation.Length;
					for (int j = 1; j < rotations; j++) {
						rotation = rotation.Substring(1) + rotation.Substring(0, 1);
						if (!IsPrime(int.Parse(rotation), primes))
							goto next;
					}
					Console.Write(i + " ");
					count++;
				}
			next:
				;
			}
			return count;
		}

		// https://projecteuler.net/problem=34
		public static int FindDigitFactorials() {
			int answer = 0;
			int[] digitFactorials = new int[10];
			digitFactorials[0] = 1;
			digitFactorials[1] = 1;
			for (int i = 2; i < 10; i++)
				digitFactorials[i] = i * digitFactorials[i - 1];
			for (int i = 145; i < 50000; i++) {
				string digits = i.ToString();
				int factorialSum = 0;
				for (int j = 0; j < digits.Length; j++) {
					int digit = (int)digits[j] - 48;
					int factorial = digitFactorials[digit];
					factorialSum += factorial;
				}

				if (i == factorialSum) {
					answer += i;
					Console.Write(i + " ");
				}
			}
			return answer;
		}

		// https://projecteuler.net/problem=33
		public static int FindDigitCancellingFractions() {
			var fractions = new List<Tuple<int, int>>();
			for (int i = 12; i < 99; i++) {
				for (int j = i + 1; j < 99; j++) {
					if (i % 10 == j / 10 && (float)(i / 10) / (j % 10) == (float)i / j) {
						fractions.Add(Tuple.Create(i, j));
						Console.WriteLine(i + "/" + j);
					}
				}
			}

			int numerator = 1, denominator = 1;
			for (int i = 0; i < fractions.Count; i++) {
				numerator *= fractions[i].Item1;
				denominator *= fractions[i].Item2;
			}

			// try reducing
			Console.WriteLine(numerator + "/" + denominator);
			int sqrt = (int)Math.Ceiling(Math.Sqrt(numerator));
			for (int i = 1; i <= sqrt; i++) {
				int reciprocal = numerator / i;
				if (i * reciprocal == numerator && denominator % reciprocal == 0) {
					numerator /= reciprocal;
					denominator /= reciprocal;
				}
			}

			Console.WriteLine(numerator + "/" + denominator);
			return denominator;
		}

		// https://projecteuler.net/problem=32
		public static int FindPandigitalProductsOneThroughNine() {
			var usedProducts = new HashSet<int>();
			for (int multiplicand = 2; multiplicand < 99; multiplicand++) {
				for (int multiplier = 1234 / multiplicand; multiplier < 4498; multiplier++) {
					bool[] digitsUsed = new bool[10];
					digitsUsed[0] = true;
					int tens = multiplicand / 10;
					digitsUsed[tens] = true;
					int ones = multiplicand % 10;
					if (digitsUsed[ones])
						continue;
					digitsUsed[ones] = true;
					int product = multiplicand * multiplier;
					if (product > 9876)
						break;
					int thousands = multiplier / 1000;
					if (thousands != 0 && digitsUsed[thousands])
						continue;
					digitsUsed[thousands] = true;
					int hundreds = multiplier % 1000;
					tens = hundreds % 100;
					ones = tens % 10;
					if (digitsUsed[ones])
						continue;
					digitsUsed[ones] = true;
					tens = tens / 10;
					if (digitsUsed[tens])
						continue;
					digitsUsed[tens] = true;
					hundreds = hundreds / 100;
					if (digitsUsed[hundreds])
						continue;
					digitsUsed[hundreds] = true;
					thousands = product / 1000;
					if (digitsUsed[thousands])
						continue;
					digitsUsed[thousands] = true;
					hundreds = product % 1000;
					tens = hundreds % 100;
					ones = tens % 10;
					if (digitsUsed[ones])
						continue;
					digitsUsed[ones] = true;
					tens = tens / 10;
					if (digitsUsed[tens])
						continue;
					digitsUsed[tens] = true;
					hundreds = hundreds / 100;
					if (digitsUsed[hundreds])
						continue;
					digitsUsed[hundreds] = true;
					if (digitsUsed.All(x => x)) {
						Console.WriteLine(multiplicand + " * " + multiplier + " = " + product);
						usedProducts.Add(product);
					}
				}
			}

			int answer = 0;
			var products = new List<int>(usedProducts);
			products.Sort();
			foreach (int product in products) {
				answer += product;
			}
			return answer;
		}

		// https://projecteuler.net/problem=31
		public static int CountWaysToMakeTotalFromPenceCoins(int penceSum) {
			int[] denominations = { 1, 2, 5, 10, 20, 50, 100, 200 };
			Func<int, int, int> getSubCombinations = null; // to allow recursion
			getSubCombinations = (penceValuesIndex, remainingPence) => {
				if (denominations[penceValuesIndex] > remainingPence) {
					return getSubCombinations(penceValuesIndex - 1, remainingPence);
				}
				int combinations = 1;
				while (penceValuesIndex > 0 && remainingPence > 0) {
					combinations += getSubCombinations(penceValuesIndex - 1, remainingPence);
					remainingPence -= denominations[penceValuesIndex];
				}
				if (remainingPence < 0) {
					combinations -= 1;
				}
				return combinations;
			};
			return getSubCombinations(denominations.Length - 1, penceSum);
		}

		// https://projecteuler.net/problem=30
		public static int SumAllNumbersEqualToSumOfNthPowersOfDigits(int power) {
			int minCandidate = (int)Math.Pow(2, power);
			int nineToPower = (int)Math.Pow(9, power);
			int maxDigitCount = nineToPower.ToString().Length;
			int maxCandidate = nineToPower * maxDigitCount;
			string sumForAllNines = maxCandidate.ToString();
			if (sumForAllNines.Length > maxDigitCount) {
				int firstDigit = int.Parse(sumForAllNines.Substring(0, 1));
				maxCandidate += (int)Math.Pow(firstDigit, power);
			}
			int sumOfAnswers = 0;
			for (int i = minCandidate; i <= maxCandidate; i++) {
				string candidate = i.ToString();
				int sumOfDigitsToPower = 0;
				for (int j = 0; j < candidate.Length; j++) {
					int digit = candidate[j] - 48;
					int digitToPower = (int)Math.Pow(digit, power);
					sumOfDigitsToPower += digitToPower;
				}
				if (i == sumOfDigitsToPower) {
					sumOfAnswers += i;
					Console.Write(i);
					Console.Write(" ");
				}
			}
			return sumOfAnswers;
		}

		// https://projecteuler.net/problem=29
		public static int CountDistinctExponentialTerms(int end) {
			int start = 2, edge = end - start + 1;
			var results = new BigInteger[edge * edge];
			for (int b = start; b <= end; b++) {
				for (int a = start; a <= end; a++) {
					BigInteger result = BigInteger.Pow(a, b);
					results[(a - start) * edge + (b - start)] = result;
				}
			}
			Array.Sort(results);
			int distinctCount = 0;
			BigInteger lastResult = 0;
			for (int i = 0; i < results.Length; i++) {
				if (results[i] != lastResult)
					distinctCount++;
				lastResult = results[i];
			}
			return distinctCount;
		}

		// https://projecteuler.net/problem=28
		public static long SumCountingSquareSpiralDiagonals(int edgeLength, bool print = false) {
			int radius = edgeLength / 2;
			int adjustment = edgeLength % 2 == 0 ? -1 : 0;
			long sum = adjustment + 1;
			long addend = sum;
			long multipleOfTwo = 0;
			if (print && sum > 0)
				Console.Write(addend);
			for (int distanceFromCenter = 1; distanceFromCenter <= radius; distanceFromCenter++) {
				multipleOfTwo += 2;
				long addendIncrement = multipleOfTwo + adjustment;
				for (int i = 0; i < 4; i++) {
					addend += addendIncrement;
					sum += addend;
					if (print)
						Console.Write(" " + addend);
				}
			}

			if (print)
				Console.WriteLine(" " + sum);
			return sum;
		}

		// https://projecteuler.net/problem=27
		public static int FindQuadraticEquationProducingMostSequentialPrimes(int maxB) {
			int answer = 0;
			int mostPrimes = 0;
			var primes = new List<long>(1000);
			for (int b = 3 /*-maxB*/; b <= maxB; b += 2) {
				for (int a = 1 - b; a < maxB; a++) {
					var list = new List<long>();
					long y = b;
					for (int n = 1; IsPrime(y, primes); n++) {
						list.Add(y);
						y = n * n + a * n + b;
					}

					if (list.Count > mostPrimes) {
						mostPrimes = list.Count;
						answer = a * b;
						Console.WriteLine(a.ToString().PadLeft(3) + ", " + b.ToString().PadLeft(3) + "  ->  " + string.Join(", ", list));
					}
				}
			}

			return answer;
		}

		// https://projecteuler.net/problem=26
		public static int FindReciprocalWithLongestRecurringCycle(int upToDenominator) {
			const int minRepeatingFractionLength = 50;
			int answer = 0;
			int longestRepitition = 0;
			BigInteger numerator = 1000000;
			for (int i = 0; i < 9; i++)
				numerator *= numerator;
			int numeratorLength = numerator.ToString().Length;
			Console.WriteLine("Using numerator length " + numeratorLength);
			for (int denominator = 2; denominator < upToDenominator; denominator++) {
				BigInteger quotient = numerator / denominator;
				string fraction = quotient.ToString().PadLeft(numeratorLength - 1, '0');
				int allZerosIndex = fraction.IndexOf("0000000000000");
				if (allZerosIndex > 0)
					fraction = fraction.Substring(0, allZerosIndex);
				if (fraction.Length < minRepeatingFractionLength) {
					Console.Write("1/");
					Console.Write(denominator);
					Console.Write(" = 0.");
					Console.WriteLine(fraction);
					continue;
				}

				string repeat = "";
				int repititionStart = -1;
				for (int start = 0; start < minRepeatingFractionLength && repititionStart < 0; start++) {
					int halfLength = numeratorLength / 3 + minRepeatingFractionLength;
					string firstHalf = fraction.Substring(start, halfLength - start);
					int next;
					while ((next = fraction.IndexOf(firstHalf, start + 1)) > 0 && next < halfLength * 2 + start && halfLength > 1) {
						repititionStart = start;
						halfLength = halfLength == 2 ? 1 : halfLength / 2 + 1;
						firstHalf = fraction.Substring(start, halfLength);
						if (firstHalf.Length == 3 && (firstHalf[0] != firstHalf[2] || firstHalf[0] != firstHalf[1]))
							break;
					}

					if (repititionStart > -1) {
						int end = fraction.IndexOf(firstHalf, start + 1);
						repeat = fraction.Substring(start, end - start);
						// verify smallest section by dividing in half and thirds
						for (int i = 2; i <= 3; i++) {
							int length = repeat.Length / i;
							if (length > 1 && repeat.Substring(0, length) == repeat.Substring(length, length)) {
								Console.WriteLine(fraction);
								Console.WriteLine(repeat);
								throw new ApplicationException("Failsafe one kicked in.");
							}
						}

						// verify at least 4 consecutive repeats
						for (int i = 1; i <= 4; i++) {
							if (fraction.Length < repeat.Length * (i + 1)) {
								break;
							}

							if (repeat != fraction.Substring(repititionStart + repeat.Length * i, repeat.Length)) {
								Console.WriteLine(fraction);
								Console.WriteLine(repeat);
								throw new ApplicationException("Failsafe two kicked in.");
							}
						}
					}
				}

				if (repititionStart < 0) {
					//fraction = fraction.Substring(0, 10);
					//Console.WriteLine(fraction);
					continue;
				}

				if (repeat.Length > longestRepitition) {
					longestRepitition = repeat.Length;
					answer = denominator;
				}

				if (repeat.Length < 50 || repeat.Length == longestRepitition) {
					Console.Write("1/");
					Console.Write(denominator);
					Console.Write(" = 0.");
					Console.Write(fraction.Substring(0, repititionStart));
					Console.Write("(");
					Console.Write(repeat);
					Console.WriteLine(")");
				}
			}

			Console.WriteLine(longestRepitition);
			return answer;
		}

		// https://projecteuler.net/problem=25
		public static int IndexOfFirstFibonacciTermWithLength(int stopAtLength) {
			const int sectionLengthLimit = 17;
			long sectionThreshold = (long)Math.Pow(10, sectionLengthLimit);
			int sectionsCapacity = stopAtLength / sectionLengthLimit + 1;
			var fibN_2 = new List<long>(sectionsCapacity);
			var fibN_1 = new List<long>(sectionsCapacity);
			var fibN = new List<long>(sectionsCapacity);
			fibN_2.Add(0);
			fibN_1.Add(0);
			fibN.Add(1);
			int termIndex = 1;
			int lastIndex = 0;
			for (int length = 0; length < stopAtLength; termIndex++) {
				if (fibN[lastIndex] >= sectionThreshold) {
					fibN_2.Add(0);
					fibN_1.Add(0);
					fibN.Add(fibN[lastIndex] / sectionThreshold);
					fibN[lastIndex] %= sectionThreshold;
					lastIndex++;
				}

				var temp = fibN_2;
				fibN_2 = fibN_1;
				fibN_1 = fibN;
				fibN = temp;
				fibN[0] = 0;
				for (int i = 0; i < lastIndex; i++) {
					fibN[i + 1] = 0;
					fibN[i] += fibN_1[i] + fibN_2[i];
					if (fibN[i] > sectionThreshold) {
						fibN[i + 1] += fibN[i] / sectionThreshold;
						fibN[i] %= sectionThreshold;
					}
				}

				fibN[lastIndex] += fibN_1[lastIndex] + fibN_2[lastIndex];
				length = sectionLengthLimit * lastIndex + fibN[lastIndex].ToString().Length;
			}

			string term = string.Empty;
			for (int i = fibN.Count - 1; i >= 0; i--) {
				term += fibN[i].ToString();
			}

			Console.WriteLine(term);
			return termIndex;
		}

		// https://projecteuler.net/problem=24
		public static string FindNthLexicographicPermutation(string charsSorted, long n, long[] factorials = null, bool print = false) {
			int length = charsSorted.Length;
			if (factorials == null) {
				factorials = GetFactorials(length, print);
			}
			n %= factorials[length - 1];
			if (n == 0) {
				return new string(charsSorted.Reverse().ToArray());
			}
			if (print) {
				Console.WriteLine();
			}
			if (n == 362881) {
				n = 362881;
			}

			long[] quotients = new long[length];
			long remaining = n - 1;
			for (int i = 1; i < length; i++) {
				long factorial = factorials[length - 1 - i];
				quotients[i - 1] = remaining / factorial;
				remaining -= factorial * quotients[i - 1];
				if (print) {
					Console.Write(remaining);
					Console.Write(" ");
				}
			}

			if (print) {
				Console.WriteLine();
				for (int i = 0; i < length; i++) {
					Console.Write(quotients[i]);
					Console.Write(" ");
				}
			}

			char[] answer = new char[length];
			char[] pool = charsSorted.ToCharArray();
			for (int i = 0; i < length; i++) {
				answer[i] = pool[quotients[i]];
				for (long j = quotients[i] + 1; j < length; j++) {
					pool[j - 1] = pool[j];
				}
				pool[length - 1] = ' ';
			}

			return new string(answer);
		}

		// https://projecteuler.net/problem=23
		public static long SumNumbersNotSumOfTwoAbundant(bool print = false) {
			int end = 28124;
			long sum = 1;
			bool[] abundantNumbers = new bool[end];
			for (int i = 2; i < end; i++) {
				// see if i can be the sum of two abundant numbers
				bool summable = false;
				for (int addend = i / 2; addend >= 12; addend--) {
					if (abundantNumbers[addend] && abundantNumbers[i - addend]) {
						summable = true;
						break;
					}
				}

				if (!summable) {
					sum += i;
				}

				// now see if i is itself an abundant number
				int divisorSum = 1;
				int mid = (int)Math.Floor(Math.Sqrt(i));
				bool square = mid * mid == i;
				if (square) {
					divisorSum += mid;
				}

				for (int divisor = square ? mid - 1 : mid; divisor > 1; divisor--) {
					if (i % divisor == 0) {
						divisorSum += divisor;
						divisorSum += i / divisor;
					}
				}

				if (divisorSum > i) {
					abundantNumbers[i] = true;
					if (print) {
						Console.Write(i);
						Console.Write(":");
						Console.Write(divisorSum);
						Console.Write(" ");
					}
				} else if (print && divisorSum == i) { // note perfect number
					Console.Write(i);
					Console.Write("p ");
				}
			}

			if (print) {
				Console.WriteLine();
			}

			return sum;
		}

		// https://projecteuler.net/problem=22
		public static long SumNameScores(params string[] names) {
			long sum = 0;
			Array.Sort(names);
			for (int i = 0; i < names.Length; i++) {
				int score = 0;
				for (int k = 0; k < names[i].Length; k++) {
					score += (int)names[i][k] - 64;
				}

				if (names[i] == "COLIN") {
					Console.Write(names[i]);
					Console.Write(" ");
					Console.Write(score);
					Console.Write(" ");
					Console.WriteLine(i + 1);
				}

				score *= i + 1;
				sum += score;
			}

			return sum;
		}

		// https://projecteuler.net/problem=21
		public static long SumAmicableNumbers(int end, bool print = false) {
			long amicableSum = 0;
			long[] divisorSums = new long[end];
			for (int i = 2; i < end; i++) {
				long divisorSum = 1;
				long mid = (long)Math.Floor(Math.Sqrt(i));
				bool square = mid * mid == i;
				if (square) {
					divisorSum += mid;
				}

				for (long factor = square ? mid - 1 : mid; factor > 1; factor--) {
					if (i % factor == 0) {
						divisorSum += factor;
						divisorSum += i / factor;
					}
				}

				divisorSums[i] = divisorSum;
				if (divisorSum < i && divisorSums[divisorSum] == i) {
					amicableSum += i + divisorSum;
					if (print) {
						Console.Write(divisorSum);
						Console.Write(":");
						Console.Write(i);
						Console.Write(" ");
					}
				}
			}

			if (print) {
				Console.WriteLine();
			}

			return amicableSum;
		}

		// https://projecteuler.net/problem=20
		public static long SumDigitsOfFactorial(int number, bool print = false) {
			var sections = new List<long> { number };
			long threshold = (long)Math.Pow(10, 17);
			for (int factor = number - 1; factor > 1; factor--) {
				int count = sections.Count;
				if (sections[count - 1] >= threshold) {
					sections.Add(sections[count - 1] / threshold);
					sections[count - 1] = sections[count - 1] % threshold;
					count = sections.Count;
				}

				for (int i = 0; i < count; i++) {
					sections[i] *= factor;
				}

				for (int i = 1; i < count; i++) {
					if (sections[i - 1] >= threshold) {
						sections[i] += sections[i - 1] / threshold;
						sections[i - 1] = sections[i - 1] % threshold;
					}
				}
			}

			string factorial = string.Empty;
			for (int i = sections.Count - 1; i >= 0; i--) {
				factorial += sections[i].ToString();
			}

			char[] chars = factorial.ToString().ToCharArray();
			long answer = 0;
			for (int i = 0; i < chars.Length; i++) {
				answer += (int)chars[i] - 48;
			}

			if (print) {
				Console.WriteLine(number);
				Console.WriteLine(chars.Length);
				Console.WriteLine(factorial);
			}

			return answer;
		}

		// https://projecteuler.net/problem=19
		public static int CountSundaysOnFirstOfMonthIn20thCentury(bool print = false) {
			int answer = 0;
			string[] daysOfWeek = { " Sun", " Mon", " Tue", " Wed", " Thu", " Fri", " Sat" };
			int monday1Jan1900 = 1;
			int[] monthLengths = { 31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30 };
			int dayFirstOfMonth = monday1Jan1900;
			// get to Dec 1 1900 (beginning of 20th century is Jan 1 2001)
			Console.Write(1900);
			for (int i = 1; i < monthLengths.Length; i++) {
				dayFirstOfMonth += monthLengths[i];
				dayFirstOfMonth %= daysOfWeek.Length;
				if (print) {
					Console.Write(", " + (i < 9 ? "0" : "") + (i + 1) + daysOfWeek[dayFirstOfMonth]);
				}
			}

			Console.WriteLine();
			for (int year = 1901; year < 2001; year++) {
				monthLengths[2] = year % 4 == 0 ? 29 : 28;
				for (int i = 0; i < monthLengths.Length; i++) {
					dayFirstOfMonth += monthLengths[i];
					dayFirstOfMonth %= daysOfWeek.Length;
					if (dayFirstOfMonth == 0) {
						if (print) {
							Console.WriteLine(year + " " + (i < 9 ? "0" : "") + (i + 1));
						}

						answer++;
					}
				}
			}

			return answer;
		}

		// https://projecteuler.net/problem=18
		// https://projecteuler.net/problem=67
		public static long FindMaxPathSum(int[][] pyramid) {
			for (int i = pyramid.Length - 2; i >= 0; i--) {
				for (int j = pyramid[i].Length - 1; j >= 0; j--) {
					pyramid[i][j] += Math.Max(pyramid[i + 1][j], pyramid[i + 1][j + 1]);
				}
			}

			return pyramid[0][0];
		}

		// https://projecteuler.net/problem=17
		public static long CountLettersInNumberWords(int upToNumber, bool print = false) {
			long count = 0;
			bool negative = upToNumber < 0;
			if (negative) {
				upToNumber = -upToNumber;
			}

			string[] upToTwenty = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
			if (upToNumber == 0) {
				count += upToTwenty[upToNumber].Length;
			}

			string[] multiplesOfTen = { "zero", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };
			for (int i = 1; i <= upToNumber; i++) {
				if (negative) {
					count += "negative".Length;
				}

				int thousands = i / 1000;
				if (thousands > 0) {
					count += upToTwenty[thousands].Length;
					count += "thousand".Length;
				}

				int hundreds = (i % 1000) / 100;
				if (hundreds > 0) {
					count += upToTwenty[hundreds].Length;
					count += "hundred".Length;
				}

				int under100 = i % 100;
				if (under100 > 0) {
					if (hundreds > 0 || thousands > 0) {
						count += "and".Length;
					}

					if (under100 < upToTwenty.Length) {
						count += upToTwenty[under100].Length;
					} else {
						int tens = under100 / 10;
						int ones = under100 % 10;
						count += multiplesOfTen[tens].Length;
						if (ones > 0) {
							count += upToTwenty[ones].Length;
						}
					}
				}
			}

			return count;
		}

		// https://projecteuler.net/problem=16
		public static long SumDigitsPowerOfTwo(int power, bool print = false) {
			const int powerBase = 29;
			long baseProduct = (long)Math.Pow(2, powerBase);
			int baseDigitCount = baseProduct.ToString().Length;
			long baseLimit = long.Parse("1".PadRight(baseDigitCount + 1, '0'));
			var distributed = new List<long> { 1 };
			int remainingPower = power;
			while (remainingPower > 0) {
				long multiplier = baseProduct;
				if (remainingPower < powerBase) {
					multiplier = (long)Math.Pow(2, remainingPower);
				}

				remainingPower -= powerBase;
				int count = distributed.Count;
				if (count > 0 && distributed[count - 1] >= baseLimit) {
					distributed.Add(distributed[count - 1] / baseLimit);
					distributed[count - 1] = distributed[count - 1] % baseLimit;
					count = distributed.Count;
				}

				for (int i = 0; i < count; i++) {
					distributed[i] *= multiplier;
				}

				for (int i = 1; i < count; i++) {
					if (distributed[i - 1] >= baseLimit) {
						distributed[i] += distributed[i - 1] / baseLimit;
						distributed[i - 1] = distributed[i - 1] % baseLimit;
					}
				}
			}

			string product = string.Empty;
			for (int i = distributed.Count - 1; i >= 0; i--) {
				product += distributed[i].ToString();
			}

			char[] chars = product.ToString().ToCharArray();
			long answer = 0;
			for (int i = 0; i < chars.Length; i++) {
				answer += (int)chars[i] - 48;
			}

			if (print) {
				Console.WriteLine(power);
				Console.WriteLine(chars.Length);
				Console.WriteLine(product);
			}

			return answer;
		}

		// https://projecteuler.net/problem=15
		public static long CountSquareLatticePathsUsingPascalsTriangle(int gridDimension, bool print = false) {
			long[] lastRow = BuildPascalsTriangle(gridDimension + 1, print);
			return TaperPascalsTriangle(lastRow, print);
		}

		public static long[] BuildPascalsTriangle(int depth, bool print = false) {
			var lastRow = new long[0];
			for (int i = 0; i < depth; i++) {
				var row = new long[i + 1];
				row[0] = row[i] = 1;
				for (int j = 1; j < i; j++)
					row[j] = lastRow[j - 1] + lastRow[j];
				lastRow = row;
				if (print)
					PrintPascalsTriangle(lastRow, depth);
			}

			return lastRow;
		}

		public static void PrintPascalsTriangle(long[] row, int depth, int cellWidth = 12) {
			int rowLength = row.Length;
			int rowWidth = depth * cellWidth;
			int leftSpace = (depth - rowLength) / 2 * cellWidth + (rowLength % 2 == 0 ? cellWidth : 0) / 2;
			Console.Write(row[0].ToString().PadLeft(leftSpace + cellWidth));
			for (int j = 1; j < rowLength; j++)
				Console.Write(row[j].ToString().PadLeft(cellWidth));
			Console.WriteLine();
		}

		public static long TaperPascalsTriangle(long[] lastRow, bool print = false) {
			int depth = lastRow.Length;
			for (int i = depth - 1; i > 0; i--) {
				var row = new long[i];
				for (int j = 0; j < i; j++)
					row[j] = lastRow[j] + lastRow[j + 1];
				lastRow = row;
				if (print)
					PrintPascalsTriangle(lastRow, depth);
			}

			return lastRow[0];
		}

		// https://projecteuler.net/problem=15
		public static long CountSquareLatticePaths(int gridDimension, bool print = false) {
			if (gridDimension < 1) {
				return 0;
			}

			long[] components = new long[gridDimension];
			components[0] = 1;
			for (int i = 1; i < gridDimension; i++) {
				for (int j = 1; j < i; j++) {
					components[j] += components[j - 1];
				}

				components[i] = components[i - 1] * 2;
			}

			long halfCount = 0;
			for (int i = 0; i < gridDimension; i++) {
				halfCount += components[i];
			}

			return halfCount * 2;
		}

		// https://projecteuler.net/problem=14
		public static int FindLongestCollatzChain(int underStartingNumber, bool print = false) {
			int longestLength = 1;
			long highestNumber = 1;
			int answer = underStartingNumber;
			int cacheSize = Int32.MaxValue / 2 < underStartingNumber ? Int32.MaxValue : underStartingNumber * 2;
			int[] lengths = new int[cacheSize];
			lengths[1] = 1;
			var stack = new List<int>(1000);
			for (int i = 2; i < underStartingNumber; i++) {
				if (lengths[i] != 0) {
					continue;
				}

				stack.Add(i);
				long number = i;
				int length = 1;
				do {
					if (print) {
						Console.Write(number);
						Console.Write(" ");
					}

					number = (number % 2 == 0) ? number / 2 : number * 3 + 1;
					if (number > highestNumber) {
						highestNumber = number;
					}

					int cachedLength = number < cacheSize ? lengths[(int)number] : 0;
					if (cachedLength > 0) {
						if (print) {
							Console.Write(number);
						}

						length += cachedLength;
						break;
					}

					length++;
					stack.Add(number < cacheSize ? (int)number : 0);
				}
				while (number != 1);
				if (print) {
					Console.Write(": ");
					Console.WriteLine(length);
				}

				if (length > longestLength) {
					longestLength = length;
					answer = i;
				}

				for (int k = 0; k < stack.Count; k++) {
					lengths[stack[k]] = length;
					length--;
				}

				stack.Clear();
			}

			Console.WriteLine(highestNumber);
			Console.WriteLine(answer);
			return longestLength;
		}

		// https://projecteuler.net/problem=13
		public static long FirstTenDigitsOfSum(params double[] addends) {
			double sum = 0;
			for (int i = 0; i < addends.Length; i++) {
				sum += addends[i];
			}

			string firstTen = sum.ToString().Replace(".", "").Substring(0, 10);
			return long.Parse(firstTen);
		}

		// https://projecteuler.net/problem=12
		public static long FirstTriangleNumberExceedingDivisors(int divisorThreshold, bool print = false) {
			long triangleNumber = 1;
			int divisorCount = 1;
			for (int i = 2; divisorCount <= divisorThreshold; i++) {
				triangleNumber += i;
				long mid = (long)Math.Floor(Math.Sqrt(triangleNumber));
				bool square = mid * mid == triangleNumber;
				divisorCount = square ? 3 : 2; // always 1 and itself, sometimes square root
				for (long factor = square ? mid - 1 : mid; factor > 1; factor--) {
					if (triangleNumber % factor == 0) {
						divisorCount += 2;
					}
				}

				if (print) {
					Console.WriteLine(triangleNumber + ":" + ("000" + divisorCount).Substring(divisorCount.ToString().Length));
				}
			}

			return triangleNumber;
		}

		// https://projecteuler.net/problem=11
		public static long FindMaxAdjacentProduct(int factorCount, int[,] grid) {
			long maxProduct = 0;
			int rowCount = grid.GetLength(0);
			int colCount = grid.GetLength(1);
			for (int i = factorCount; i < rowCount; i++) {
				int beginRow = i - factorCount, endRow = i;
				for (int j = factorCount; j < colCount; j++) {
					int beginCol = j - factorCount, endCol = j;
					long product = 1;
					for (int row = beginRow, col = beginCol; row < endRow; row++, col++) {
						product *= grid[row, col];
					}

					if (product > maxProduct) {
						maxProduct = product;
						Console.WriteLine(beginRow + "\\" + beginCol);
					}

					product = 1;
					for (int row = endRow - 1, col = beginCol; row >= beginRow; row--, col++) {
						product *= grid[row, col];
					}

					if (product > maxProduct) {
						maxProduct = product;
						Console.WriteLine((endRow - 1) + "/" + beginCol);
						;
					}
				}

				for (int col = 0; col < colCount; col++) {
					long product = 1;
					for (int row = beginRow; row < endRow; row++) {
						product *= grid[row, col];
					}

					if (product > maxProduct) {
						maxProduct = product;
						Console.WriteLine(beginRow + "|" + col);
					}
				}
			}

			for (int j = factorCount; j < colCount; j++) {
				int beginCol = j - factorCount, endCol = j;
				for (int row = 0; row < rowCount; row++) {
					long product = 1;
					for (int col = beginCol; col < endCol; col++) {
						product *= grid[row, col];
					}

					if (product > maxProduct) {
						maxProduct = product;
						Console.WriteLine(row + "_" + beginCol);
					}
				}
			}

			return maxProduct;
		}

		// https://projecteuler.net/problem=10
		public static long SumPrimesBelow(int limit, bool print = false) {
			long answer = 0;
			var primes = new List<long>(limit / 4 + 4);
			primes.AddRange(new long[] { 2, 3, 5, 7 });
			for (int i = 0; i < primes.Count; i++) {
				answer += primes[i];
			}

			for (int i = 11; i < limit; i += 2) {
				if (IsPrime(i, primes)) {
					answer += i;
				}
			}

			if (print) {
				Console.WriteLine(string.Join(" ", primes));
			}

			return answer;
		}

		// https://projecteuler.net/problem=9
		public static long FindPythagoreanTripletProduct(int tripletSum) {
			for (long b = tripletSum - 2; b > 1; b--) {
				long b2 = b * b;
				for (long a = tripletSum - b - 1; a > 0; a--) {
					long a2 = a * a;
					long c = tripletSum - a - b;
					long c2 = c * c;
					if (a2 + b2 == c2) {
						Console.WriteLine(a + "^2 + " + b + "^2 = " + c + "^2");
						return a * b * c;
					}
				}
			}

			return -1;
		}

		// https://projecteuler.net/problem=8
		public static long FindMaxAdjacentProduct(int digitCount, string digitString, bool print = true) {
			long greatestProduct = 0;
			int greatestProductIndex = 0;
			char[] digitChars = digitString.ToCharArray();
			int[] digits = new int[digitChars.Length];
			for (int i = 0; i < digitChars.Length; i++) {
				digits[i] = (int)digitChars[i] - 48;
			}

			for (int end = digitCount, len = digits.Length; end <= len; end++) {
				long product = 1;
				for (int i = end - digitCount; i < end; i++) {
					product *= digits[i];
					if (product == 0) {
						end += i - (end - digitCount);
						break;
					}
				}

				if (product > greatestProduct) {
					greatestProduct = product;
					greatestProductIndex = end - digitCount;
				}
			}

			if (print) {
				Console.Write("Index ");
				Console.Write(greatestProductIndex);
				string separator = ": ";
				for (int i = greatestProductIndex, end = greatestProductIndex + digitCount; i < end; i++) {
					Console.Write(separator);
					separator = " x ";
					Console.Write(digits[i]);
				}

				Console.Write(" = ");
				Console.WriteLine(greatestProduct);
			}

			return greatestProduct;
		}

		// https://projecteuler.net/problem=7
		public static long FindNthPrimeNumber(int n, bool print = false) {
			var firstFewPrimes = new List<long>(n)
			{2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
			if (print) {
				for (int i = 0; i < n && i < firstFewPrimes.Count; i++) {
					Console.Write(" ");
					Console.Write(firstFewPrimes[i]);
				}
			}

			if (n <= firstFewPrimes.Count) {
				return firstFewPrimes[n - 1];
			}

			long prime = firstFewPrimes[firstFewPrimes.Count - 1];
			for (int i = firstFewPrimes.Count; i < n; i++) {
				prime += 2;
				while (!IsPrime(prime, firstFewPrimes)) {
					prime += 2;
				}

				if (print) {
					Console.Write(" ");
					Console.Write(prime);
				}
			}

			if (print) {
				Console.WriteLine();
			}

			return prime;
		}

		// https://projecteuler.net/problem=6
		public static long DiffSumOfSquaresAndSquareOfSum(int upTo) {
			int answer = 0;
			for (int i = 1; i <= upTo; i++) {
				for (int j = 1; j <= upTo; j++) {
					if (j != i) {
						answer += j * i;
					}
				}
			}

			return answer;
		}

		// https://projecteuler.net/problem=6
		public static long DiffSquareOfSumAndSumOfSquares(long upTo) {
			long sum = 0;
			long sumOfSquares = 0;
			for (long i = 1; i <= upTo; i++) {
				sum += i;
				sumOfSquares += i * i;
			}

			long squareOfSum = sum * sum;
			return squareOfSum - sumOfSquares;
		}

		// https://projecteuler.net/problem=5
		public static long FindSmallestNumberDivisibleByFactorsUpTo(int limit) {
			long answer = 1;
			for (int i = 2; i <= limit; i++) {
				if (answer % i > 0) {
					answer *= FindLargestPrimeFactor(i);
				}
			}

			return answer;
		}

		// https://projecteuler.net/problem=4
		public static int FindLargestPalindromeProductOfTwoFactors(int factorDigitCount) {
			if (factorDigitCount < 1 || factorDigitCount > 4) {
				return -1; // just abort, no point supporting < 1, and > 4 is too much processing for now
			}

			int minFactor = (int)Math.Pow(10, factorDigitCount - 1);
			int maxFactor = factorDigitCount == 1 ? 0 : (int)Math.Pow(10, factorDigitCount) - 1;
			// find palidromes or products? I think multiplication is a lot faster than string manipulation...
			// precalc all products? need an algorithm to predict sorting of products descending...
			int largestPalindrome = -1;
			for (int factor1 = maxFactor; factor1 >= minFactor; factor1--) {
				int factor2 = factor1;
				while (factor2 >= minFactor) {
					int product = factor1 * factor2;
					if (product < largestPalindrome) {
						break;
					}

					bool isPalindrome = true;
					string test = product.ToString();
					int len = test.Length;
					int checks = len / 2;
					for (int i = 0; i < checks; i++) {
						if (test[i] != test[len - 1 - i]) {
							isPalindrome = false;
							break;
						}
					}

					if (isPalindrome) {
						largestPalindrome = product;
						break;
					}

					factor2--;
				}

				if (factor2 == factor1 && largestPalindrome != -1) {
					break;
				}
			}

			return largestPalindrome;
		}

		// https://projecteuler.net/problem=3
		public static long FindLargestPrimeFactor(long num) {
			long number = Math.Abs(num);
			var primes = new List<long>(1000);
			if (IsPrime(number, primes)) {
				return num;
			}

			long factor = number / 2;
			while (factor > 1) {
				if (number % factor == 0 && IsPrime(factor, primes)) {
					return factor;
				}

				factor--;
			}

			return 1;
		}

		// https://projecteuler.net/problem=2
		public static int SumEvenFibonacci(int boundExclusive) {
			int answer = 0, fibN = 2, fibN_1 = 1, fibN_2 = 1;
			while (fibN < boundExclusive) {
				if (fibN % 2 == 0) {
					answer += fibN;
				}

				fibN_2 = fibN_1;
				fibN_1 = fibN;
				fibN = fibN_2 + fibN_1;
			}

			return answer;
		}

		// https://projecteuler.net/problem=1
		public static int SumMultiplesOf3And5UpTo(int boundExclusive) {
			int sum = 0;
			sum += SumMultiples(3, boundExclusive, 0);
			sum += SumMultiples(5, boundExclusive, 3);
			return sum;
		}

		public static int SumMultiples(int baseAddend, int boundExclusive, int excludeMultiplesOf) {
			int sum = 0;
			int addend = baseAddend;
			while (addend < boundExclusive) {
				if (excludeMultiplesOf < 1 || addend % excludeMultiplesOf > 0) {
					sum += addend;
				}

				addend += baseAddend;
			}

			return sum;
		}

		private static long[] GetFactorials(int length, bool print = false) {
			long[] factorials = new long[length];
			long factorial = 1;
			for (int i = 0; i < length; i++) {
				factorial *= i + 1;
				factorials[i] = factorial;
				if (print) {
					Console.Write(factorial);
					Console.Write(" ");
				}
			}
			if (print) {
				Console.WriteLine();
			}
			return factorials;
		}

		private static void PrintPrimes(int end) {
			var primes = new List<long>(1000);
			for (int i = 2; i < end; i++) {
				if (IsPrime(i, primes)) {
					Console.Write(i);
					Console.Write(" ");
				}
			}

			Console.WriteLine();
			for (int i = 2; i < end; i++) {
				if (IsPrime(i, primes)) {
					Console.Write(i);
					Console.Write(" ");
				}
			}
		}

		public static bool IsPrime(BigInteger number, List<BigInteger> primes) {
			if (number == 2) {
				return true;
			}
			if (number < 2) {
				return false;
			}

			if (primes.Count < 3) {
				if (primes.Count == 0)
					primes.Add(2);
				if (primes.Count == 1)
					primes.Add(3);
				primes.Add(5);
			}

			int bitLength = (int)Math.Ceiling(BigInteger.Log(number, 2));
			BigInteger mid = BigInteger.One << (bitLength / 2);
			while (mid * mid > number || (mid + 1) * (mid + 1) < number) {
				mid += number / mid;
				mid /= 2;
			}
			if (mid * mid < number)
				mid++;

			BigInteger prime = primes[primes.Count - 1];
			for (BigInteger i = prime + 2; prime <= mid; i += 2) {
				if (IsPrime(i, primes)) {
					primes.Add(prime = i);
				}
			}

			for (int i = 0; primes[i] <= mid; i++) {
				if (number % primes[i] == 0) {
					return false;
				}
			}

			return true;
		}

		public static bool IsPrime(long number, List<long> primes) {
			if (number == 2) {
				return true;
			}
			if (number < 2) {
				return false;
			}

			if (primes.Count < 3) {
				if (primes.Count == 0)
					primes.Add(2);
				if (primes.Count == 1)
					primes.Add(3);
				primes.Add(5);
			}

			long mid = (long)Math.Ceiling(Math.Sqrt(number));
			long prime = primes[primes.Count - 1];
			for (long i = prime + 2; prime <= mid; i += 2) {
				if (IsPrime(i, primes)) {
					primes.Add(prime = i);
				}
			}

			for (int i = 0; primes[i] <= mid; i++) {
				if (number % primes[i] == 0) {
					return false;
				}
			}

			return true;
		}

		// return zero-based prime index, or -1 if number is not a prime
		public static int PrimeIndex(BigInteger number, List<BigInteger> primes) {
			if (number < 2) {
				return -1;
			}

			if (primes.Count < 3) {
				if (primes.Count == 0)
					primes.Add(2);
				if (primes.Count == 1)
					primes.Add(3);
				primes.Add(5);
			}

			BigInteger prime = primes[primes.Count - 1];
			if (number < prime) {
				int left = 0, right = primes.Count - 1;
				while (left <= right) {
					int mid = (right - left) / 2 + left;
					if (number == primes[mid])
						return mid;
					if (number < primes[mid])
						right = mid - 1;
					else
						left = mid + 1;
				}

				return -1;
			}

			for (BigInteger i = prime + 2; i <= number; i += 2) {
				int bitLength = (int)Math.Ceiling(BigInteger.Log(i, 2));
				BigInteger mid = BigInteger.One << (bitLength / 2);
				while (mid * mid > i || (mid + 1) * (mid + 1) < i) {
					mid += i / mid;
					mid /= 2;
				}
				if (mid * mid < i)
					mid++;

				for (int j = 1; primes[j] <= mid; j++) {
					if (i % primes[j] == 0)
						goto next;
				}

				primes.Add(i);
			next:
				;
			}

			prime = primes[primes.Count - 1];
			if (number == prime) {
				return primes.Count - 1;
			}

			return -1;
		}

		// return zero-based prime index, or -1 if number is not a prime
		public static int PrimeIndex(long number, List<long> primes) {
			if (number < 2) {
				return -1;
			}

			if (primes.Count < 3) {
				if (primes.Count == 0)
					primes.Add(2);
				if (primes.Count == 1)
					primes.Add(3);
				primes.Add(5);
			}

			long prime = primes[primes.Count - 1];
			if (number < prime) {
				int left = 0, right = primes.Count - 1;
				while (left <= right) {
					int mid = (right - left) / 2 + left;
					if (number == primes[mid])
						return mid;
					if (number < primes[mid])
						right = mid - 1;
					else
						left = mid + 1;
				}

				return -1;
			}

			for (long i = prime + 2; i <= number; i += 2) {
				long mid = (long)Math.Ceiling(Math.Sqrt(i));
				for (int j = 1; primes[j] <= mid; j++) {
					if (i % primes[j] == 0)
						goto next;
				}

				primes.Add(i);
			next:
				;
			}

			prime = primes[primes.Count - 1];
			if (number == prime) {
				return primes.Count - 1;
			}

			return -1;
		}
	}
}